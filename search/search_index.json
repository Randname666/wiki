{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Welcome to the Xbox One Research wiki! This is a place where information about the Xbox One console can be shared. Things are currently slow but will be adding when we can. See FAQ for frequently asked questions. Getting started General Exploits Hardware Console revisions CPU Southbridge eMMC / Flash Wifi Ethernet Optical Disc Drive RF unit Software Telemetry Bootloaders Xbox Operating System Hard drive Flash (XBFS) Security Processor Certificates Xbox Game Disc Special NTFS USB files Bootanimation Xbox UI XCRDUtil File formats Xbox Virtual Drives (XVD) XVI XCT VBI Savegames Dev Mode Devkit types Setting up your console Installing Compatible Software Important We do our best to ensure that we are respectful towards the research conducted on the Xbox One. However, if there is any issues we are open for discussion and will work with Microsoft accordingly.","title":"Home"},{"location":"#welcome","text":"Welcome to the Xbox One Research wiki! This is a place where information about the Xbox One console can be shared. Things are currently slow but will be adding when we can. See FAQ for frequently asked questions.","title":"Welcome"},{"location":"#getting-started","text":"","title":"Getting started"},{"location":"#general","text":"Exploits","title":"General"},{"location":"#hardware","text":"Console revisions CPU Southbridge eMMC / Flash Wifi Ethernet Optical Disc Drive RF unit","title":"Hardware"},{"location":"#software","text":"Telemetry Bootloaders Xbox Operating System Hard drive Flash (XBFS) Security Processor Certificates Xbox Game Disc Special NTFS USB files Bootanimation Xbox UI XCRDUtil","title":"Software"},{"location":"#file-formats","text":"Xbox Virtual Drives (XVD) XVI XCT VBI Savegames","title":"File formats"},{"location":"#dev-mode","text":"Devkit types Setting up your console Installing Compatible Software","title":"Dev Mode"},{"location":"#important","text":"We do our best to ensure that we are respectful towards the research conducted on the Xbox One. However, if there is any issues we are open for discussion and will work with Microsoft accordingly.","title":"Important"},{"location":"bootanimation/","text":"Bootanimation Bootanimation is the Xbox loading animation showing at bootup of the console. The file is stored in XBFS as bootanim.dat. It uses a proprietary format, likely specific to the AMD GPU. File format The file starts with a section header (BOOTANIM_SECTION_HEADER) and then followed by unknown data of size Header->SectionSize . If the following data starts with the header magic, an additional section follows. BOOTANIM_SECTION_HEADER Offset Length Type Information 0x00 0x04 uint Magic (FSEG) 0x04 0x04 uint SectionIndex 0x08 0x04 uint SectionSize BOOTANIM_DATE Offset Length Type Information 0x00 0x?? ?? Unknown","title":"Bootanimation"},{"location":"bootanimation/#bootanimation","text":"Bootanimation is the Xbox loading animation showing at bootup of the console. The file is stored in XBFS as bootanim.dat. It uses a proprietary format, likely specific to the AMD GPU.","title":"Bootanimation"},{"location":"bootanimation/#file-format","text":"The file starts with a section header (BOOTANIM_SECTION_HEADER) and then followed by unknown data of size Header->SectionSize . If the following data starts with the header magic, an additional section follows.","title":"File format"},{"location":"bootanimation/#bootanim_section_header","text":"Offset Length Type Information 0x00 0x04 uint Magic (FSEG) 0x04 0x04 uint SectionIndex 0x08 0x04 uint SectionSize","title":"BOOTANIM_SECTION_HEADER"},{"location":"bootanimation/#bootanim_date","text":"Offset Length Type Information 0x00 0x?? ?? Unknown","title":"BOOTANIM_DATE"},{"location":"bootloaders/","text":"Bootloaders Bootloaders used on Xbox One. SPBL Primary bootloader that is used for initialising the Security Processor, decrypting the future stages, verifying the console certificates, fuses and more. This sequence is split into 3 boot stages. 0SP : Stored in SP ROM (factory) 1SP : Patched into boot.bin 2SP : Patched into boot.bin SMC 2BL Started after the SP has completed its boot. Proceeds to intialise the rest of the console and then begins booting into the Host VBI. SCP (S)treaming (C)rypto (P)rocessor - internal crypto engine on the APU die. Data blob thats uploaded to the SCP, for initialization?! Initialization phase: Unknown, somewhere in between 2BL and VBI. VBI Final boot stage which initialises the critical components of the operating system and essentially acts as a bootstrap.","title":"Bootloaders"},{"location":"bootloaders/#bootloaders","text":"Bootloaders used on Xbox One.","title":"Bootloaders"},{"location":"bootloaders/#spbl","text":"Primary bootloader that is used for initialising the Security Processor, decrypting the future stages, verifying the console certificates, fuses and more. This sequence is split into 3 boot stages. 0SP : Stored in SP ROM (factory) 1SP : Patched into boot.bin 2SP : Patched into boot.bin","title":"SPBL"},{"location":"bootloaders/#smc","text":"","title":"SMC"},{"location":"bootloaders/#2bl","text":"Started after the SP has completed its boot. Proceeds to intialise the rest of the console and then begins booting into the Host VBI.","title":"2BL"},{"location":"bootloaders/#scp","text":"(S)treaming (C)rypto (P)rocessor - internal crypto engine on the APU die. Data blob thats uploaded to the SCP, for initialization?! Initialization phase: Unknown, somewhere in between 2BL and VBI.","title":"SCP"},{"location":"bootloaders/#vbi","text":"Final boot stage which initialises the critical components of the operating system and essentially acts as a bootstrap.","title":"VBI"},{"location":"certificates/","text":"Certificates For verification of the console and as well as a method of securely determining the capabalities to enable. Console Certificate Per-console certificate to verify and define the device. Stored in sp_s.cfg (offset: 0x5400) inside XBFS . Total Size: 0x400 bytes Offset Length Type Information 0x00 0x02 ushort Magic (CC) 0x02 0x02 ushort Size 0x04 0x02 ushort IssuerKeyId 0x06 0x02 ushort ProtocolVersion 0x08 0x04 uint32 IssueDate 0x0C 0x04 uint32 PspRevisionId 0x10 0x10 byte[] SocId 0x20 0x02 ushort GenerationId 0x22 0x01 byte ConsoleRegion 0x23 0x01 byte Reserved0 0x24 0x04 uint32 Reserved1 0x28 0x08 byte[] VendorId 0x30 0x100 byte[] AttestationPublicKey 0x130 0x100 byte[] ReservedPublicKey 0x230 0x0C byte[] ConsoleSerialNumber 0x23C 0x08 byte[] ConsoleSku 0x244 0x20 byte[] ConsoleSettingsDigest (SHA256) 0x264 0x0C byte[] ConsolePartNumber 0x270 0x10 byte[] HwSpecificData 0x280 0x180 byte[] RsaSignature Boot Capability Certificate Used to determine what type of developer features the console can use. Stored in certkeys.bin inside XBFS . Format Total Size: 0x180 bytes Offset Length Type Information 0x00 0x02 ushort Magic (CP) 0x02 0x02 ushort Size 0x04 0x02 ushort ProtocolVersion 0x06 0x02 ushort IssuerKeyId 0x08 0x08 uint64 Issue Date 0x10 0x10 byte[] SoC ID 0x20 0x02 ushort GenerationId 0x22 0x01 byte AllowedStates 0x23 0x01 byte LastCapability 0x24 0x04 uint Flags 0x28 0x01 byte ExpireCentury 0x29 0x01 byte ExpireYear 0x2A 0x01 byte ExpireMonth 0x2B 0x01 byte ExpireDayOfMonth 0x2C 0x01 byte ExpireHour 0x2D 0x01 byte ExpireMinute 0x2E 0x01 byte ExpireSecond 0x2F 0x01 byte MinimumSpVersion 0x30 0x08 uint64 Minimum2blVersion 0x38 0x10 byte[] Nonce 0x48 0x38 byte[] Reserved 0x80 0x200 ushort[] Capabilities 0x280 0x180 byte[] RsaSignature Capabilities enum CERTIFICATE_CAPABILITIES : ushort { SRA_DEVKIT = 0x2001, SRA_DEVKIT_DEBUG = 0x2002, SRA_FILE_IO = 0x2003, SRA_STREAM = 0x2004, SRA_PUSH_DEPLOY = 0x2005, SRA_PULL_DEPLOY = 0x2006, SRA_PROFILING = 0x2007, SRA_JS_PROFILING = 0x2008, RECOVERY = 0x3001, VS_CRASH_DUMP = 0x3002, CRASH_DUMP = 0x3003, REMOTE_MGMT = 0x3004, VIEW_TRACING = 0x3005, TCR_TOOL = 0x3006, XSTUDIO = 0x3007, GESTURE_BUILDER = 0x3008, SPEECH_LAB = 0x3009, SMARTGLASS_STUDIO = 0x300A, NETWORK_FIDDLER = 0x300B, ERA_DEVKIT = 0x4001, HW_BERSINGSEA_DEBUG = 0x4002, ERA_DEVKIT_DEBUG = 0x4003, ERA_FILE_IO = 0x4004, ERA_STREAM = 0x4005, ERA_PUSH_DEPLOY = 0x4006, ERA_PULL_DEPLOY = 0x4007, ERA_EXTRA_MEM = 0x4008, ERA_PROFILING = 0x4009, MS_DEVKIT = 0x6001, HW_CPU_DEBUG = 0x6002, HW_FW_DEBUG = 0x6003, HW_POWER_DEBUG = 0x6004, MEMENC_DISABLED = 0x6005, MEMENC_FIXED_KEY = 0x6006, MEMENC_KEY_0 = 0x6007, CERT_MTE_BOOST = 0x6008, CERT_RIO_BOOST = 0x6009, CERT_TEST_BOOST = 0x600A, UPDATE_TESTER = 0x600B, RED_CPU_CODE = 0x600C, OS_PREVIEW = 0x600D, RETAIL_DEBUGGER = 0x600E, OFFLINE = 0x600F, IGNORE_UPDATESEQUENCE = 0x6010, CERT_QASLT = 0x6011, GPU_FENCE_DEBUG = 0x6013, HW_EN_MEM_SPEED_RETEST = 0x6014, HW_EN_MEM_1GB_RETEST = 0x6015, HW_EN_FUSE_READ = 0x6016, HW_EN_POST_CODE_SECURE = 0x6017, HW_EN_FUSE_OVR_RETEST = 0x6018, HW_EN_MEM_UNLIM_RETEST = 0x6019, ICT_TESTER = 0x601A, LOADXVD_TESTER = 0x601B, WIDE_THERMAL_THRESHOLDS = 0x601C, MS_TESTLAB = 0x601D, ALLOW_DISK_LICENSE = 0x601E, ALLOW_SYSTEM_DOWNGRADE = 0x601F, WIFI_TESTER = 0x6020, GREEN_FIDDLER = 0x6021, KIOSK_MODE = 0x6022, FULL_MEDIA_AUTH = 0x6023, HW_DEVTEST = 0x6024, ALLOW_FUSE_FA = 0x6025, ALLOW_SERIAL_CERT_UPLOAD = 0x6026, ALLOW_INSTRUMENTATION = 0x6027, WIFI_TESTER_DFS = 0x6028, HOSTOS_HW_TEST = 0x6029, HOSTOS_ODD_TEST = 0x602A, REDUCE_MODE_TESTER = 0x7002, SP_DEVKIT = 0x8001, HW_SP_DEBUG = 0x8002, SCP_DEBUG = 0x8003, HW_SDF = 0x8004, HW_ALL_DEBUG = 0x8005, HW_AEB_DEBUG = 0x8006, HW_BTG = 0x8007, SP_TESTER = 0x8008, SP_DEBUG_BUILD = 0x8009, NO_FUSE_BLOW = 0x800A, HW_DIS_N_CALIB_RETEST = 0x800B, HW_DIS_CRIT_FUSE_CHK_RETEST = 0x800C, GREEN_SRA_DEBUG = 0x800D, GREEN_ERA_DEBUG = 0x800E, HW_DIS_RNG_CHK_SECURE = 0x800F, HW_EN_FUSE_OVRD_SECURE = 0x8010, GREEN_HOST_DEBUG = 0x8011, GREEN_ALLOW_DISK_LICENSES = 0x8012, VIRT_CAP_DEVKIT_ANY_EQUIV = 0xF001, VIRT_CAP_DEVKIT_INTERNAL_EQUIV = 0xF002, VIRT_CAP_SP_DEVKIT_EQUIV = 0xF003 }; Information about capabilities gathered from: C:\\Windows\\DefaultApp\\XboxOneExtensions.dll","title":"Certificates"},{"location":"certificates/#certificates","text":"For verification of the console and as well as a method of securely determining the capabalities to enable.","title":"Certificates"},{"location":"certificates/#console-certificate","text":"Per-console certificate to verify and define the device. Stored in sp_s.cfg (offset: 0x5400) inside XBFS . Total Size: 0x400 bytes Offset Length Type Information 0x00 0x02 ushort Magic (CC) 0x02 0x02 ushort Size 0x04 0x02 ushort IssuerKeyId 0x06 0x02 ushort ProtocolVersion 0x08 0x04 uint32 IssueDate 0x0C 0x04 uint32 PspRevisionId 0x10 0x10 byte[] SocId 0x20 0x02 ushort GenerationId 0x22 0x01 byte ConsoleRegion 0x23 0x01 byte Reserved0 0x24 0x04 uint32 Reserved1 0x28 0x08 byte[] VendorId 0x30 0x100 byte[] AttestationPublicKey 0x130 0x100 byte[] ReservedPublicKey 0x230 0x0C byte[] ConsoleSerialNumber 0x23C 0x08 byte[] ConsoleSku 0x244 0x20 byte[] ConsoleSettingsDigest (SHA256) 0x264 0x0C byte[] ConsolePartNumber 0x270 0x10 byte[] HwSpecificData 0x280 0x180 byte[] RsaSignature","title":"Console Certificate"},{"location":"certificates/#boot-capability-certificate","text":"Used to determine what type of developer features the console can use. Stored in certkeys.bin inside XBFS .","title":"Boot Capability Certificate"},{"location":"certificates/#format","text":"Total Size: 0x180 bytes Offset Length Type Information 0x00 0x02 ushort Magic (CP) 0x02 0x02 ushort Size 0x04 0x02 ushort ProtocolVersion 0x06 0x02 ushort IssuerKeyId 0x08 0x08 uint64 Issue Date 0x10 0x10 byte[] SoC ID 0x20 0x02 ushort GenerationId 0x22 0x01 byte AllowedStates 0x23 0x01 byte LastCapability 0x24 0x04 uint Flags 0x28 0x01 byte ExpireCentury 0x29 0x01 byte ExpireYear 0x2A 0x01 byte ExpireMonth 0x2B 0x01 byte ExpireDayOfMonth 0x2C 0x01 byte ExpireHour 0x2D 0x01 byte ExpireMinute 0x2E 0x01 byte ExpireSecond 0x2F 0x01 byte MinimumSpVersion 0x30 0x08 uint64 Minimum2blVersion 0x38 0x10 byte[] Nonce 0x48 0x38 byte[] Reserved 0x80 0x200 ushort[] Capabilities 0x280 0x180 byte[] RsaSignature","title":"Format"},{"location":"certificates/#capabilities","text":"enum CERTIFICATE_CAPABILITIES : ushort { SRA_DEVKIT = 0x2001, SRA_DEVKIT_DEBUG = 0x2002, SRA_FILE_IO = 0x2003, SRA_STREAM = 0x2004, SRA_PUSH_DEPLOY = 0x2005, SRA_PULL_DEPLOY = 0x2006, SRA_PROFILING = 0x2007, SRA_JS_PROFILING = 0x2008, RECOVERY = 0x3001, VS_CRASH_DUMP = 0x3002, CRASH_DUMP = 0x3003, REMOTE_MGMT = 0x3004, VIEW_TRACING = 0x3005, TCR_TOOL = 0x3006, XSTUDIO = 0x3007, GESTURE_BUILDER = 0x3008, SPEECH_LAB = 0x3009, SMARTGLASS_STUDIO = 0x300A, NETWORK_FIDDLER = 0x300B, ERA_DEVKIT = 0x4001, HW_BERSINGSEA_DEBUG = 0x4002, ERA_DEVKIT_DEBUG = 0x4003, ERA_FILE_IO = 0x4004, ERA_STREAM = 0x4005, ERA_PUSH_DEPLOY = 0x4006, ERA_PULL_DEPLOY = 0x4007, ERA_EXTRA_MEM = 0x4008, ERA_PROFILING = 0x4009, MS_DEVKIT = 0x6001, HW_CPU_DEBUG = 0x6002, HW_FW_DEBUG = 0x6003, HW_POWER_DEBUG = 0x6004, MEMENC_DISABLED = 0x6005, MEMENC_FIXED_KEY = 0x6006, MEMENC_KEY_0 = 0x6007, CERT_MTE_BOOST = 0x6008, CERT_RIO_BOOST = 0x6009, CERT_TEST_BOOST = 0x600A, UPDATE_TESTER = 0x600B, RED_CPU_CODE = 0x600C, OS_PREVIEW = 0x600D, RETAIL_DEBUGGER = 0x600E, OFFLINE = 0x600F, IGNORE_UPDATESEQUENCE = 0x6010, CERT_QASLT = 0x6011, GPU_FENCE_DEBUG = 0x6013, HW_EN_MEM_SPEED_RETEST = 0x6014, HW_EN_MEM_1GB_RETEST = 0x6015, HW_EN_FUSE_READ = 0x6016, HW_EN_POST_CODE_SECURE = 0x6017, HW_EN_FUSE_OVR_RETEST = 0x6018, HW_EN_MEM_UNLIM_RETEST = 0x6019, ICT_TESTER = 0x601A, LOADXVD_TESTER = 0x601B, WIDE_THERMAL_THRESHOLDS = 0x601C, MS_TESTLAB = 0x601D, ALLOW_DISK_LICENSE = 0x601E, ALLOW_SYSTEM_DOWNGRADE = 0x601F, WIFI_TESTER = 0x6020, GREEN_FIDDLER = 0x6021, KIOSK_MODE = 0x6022, FULL_MEDIA_AUTH = 0x6023, HW_DEVTEST = 0x6024, ALLOW_FUSE_FA = 0x6025, ALLOW_SERIAL_CERT_UPLOAD = 0x6026, ALLOW_INSTRUMENTATION = 0x6027, WIFI_TESTER_DFS = 0x6028, HOSTOS_HW_TEST = 0x6029, HOSTOS_ODD_TEST = 0x602A, REDUCE_MODE_TESTER = 0x7002, SP_DEVKIT = 0x8001, HW_SP_DEBUG = 0x8002, SCP_DEBUG = 0x8003, HW_SDF = 0x8004, HW_ALL_DEBUG = 0x8005, HW_AEB_DEBUG = 0x8006, HW_BTG = 0x8007, SP_TESTER = 0x8008, SP_DEBUG_BUILD = 0x8009, NO_FUSE_BLOW = 0x800A, HW_DIS_N_CALIB_RETEST = 0x800B, HW_DIS_CRIT_FUSE_CHK_RETEST = 0x800C, GREEN_SRA_DEBUG = 0x800D, GREEN_ERA_DEBUG = 0x800E, HW_DIS_RNG_CHK_SECURE = 0x800F, HW_EN_FUSE_OVRD_SECURE = 0x8010, GREEN_HOST_DEBUG = 0x8011, GREEN_ALLOW_DISK_LICENSES = 0x8012, VIRT_CAP_DEVKIT_ANY_EQUIV = 0xF001, VIRT_CAP_DEVKIT_INTERNAL_EQUIV = 0xF002, VIRT_CAP_SP_DEVKIT_EQUIV = 0xF003 }; Information about capabilities gathered from: C:\\Windows\\DefaultApp\\XboxOneExtensions.dll","title":"Capabilities"},{"location":"compiling-for-xbox/","text":"Compiling for Xbox Since the Xbox One's System operating system is based on OneCore we can use the libraries provided in Visual Studio and the Windows SDK. The primary library that will solve our needs is named: 'OneCore.lib' or 'OneCoreUAP.lib'. This is known as an umbrella library which links the common Win32 API's that are common among all Windows 10 devices. You can learn more here: https://docs.microsoft.com/en-us/windows/win32/apiindex/windows-umbrella-libraries Requirements Recommended: CMake Visual Studio 2019/2017 w/ the following (depending on version): MSVC v141 - VS 2017 C++ x64/x86 build tools (v14.16) & MSVC v141 VS 2017 C++ x64/x86 Spectre-mitigated libs MSVC v142 - VS 2019 C++ x64/x86 build tools (v14.22) & MSVC v142 VS 2019 C++ x64/x86 Spectre-mitigated libs Windows Universal CRT SDK Windows 10 SDK (Latest)","title":"Compiling for xbox"},{"location":"compiling-for-xbox/#compiling-for-xbox","text":"Since the Xbox One's System operating system is based on OneCore we can use the libraries provided in Visual Studio and the Windows SDK. The primary library that will solve our needs is named: 'OneCore.lib' or 'OneCoreUAP.lib'. This is known as an umbrella library which links the common Win32 API's that are common among all Windows 10 devices. You can learn more here: https://docs.microsoft.com/en-us/windows/win32/apiindex/windows-umbrella-libraries","title":"Compiling for Xbox"},{"location":"compiling-for-xbox/#requirements","text":"Recommended: CMake Visual Studio 2019/2017 w/ the following (depending on version): MSVC v141 - VS 2017 C++ x64/x86 build tools (v14.16) & MSVC v141 VS 2017 C++ x64/x86 Spectre-mitigated libs MSVC v142 - VS 2019 C++ x64/x86 build tools (v14.22) & MSVC v142 VS 2019 C++ x64/x86 Spectre-mitigated libs Windows Universal CRT SDK Windows 10 SDK (Latest)","title":"Requirements"},{"location":"console-revisions/","text":"Console revisions Revisions Revision Enum Information DURANGO 0x10 First retail revision. SILVERTON ZORRO 0x20 TBD SILVERTON MANDA 0x21 TBD CARMEL BASE 0x30 TBD CARMEL 4K 0x31 TBD EDMONTON 0x40 TBD SCORPIO 0x50 TBD Reading revision via software C code #define CPUID_HW_REV 0x4000000D #define HW_REV_DURANGO 0x10 #define HW_REV_SILVERTON_ZORRO 0x20 #define HW_REV_SILVERTON_MANDA 0x21 #define HW_REV_CARMEL_BASE 0x30 #define HW_REV_CARMEL_4K 0x31 #define HW_REV_EDMONTON 0x40 #define HW_REV_SCORPIO 0x50 int regs[4]; __cpuid(regs, CPUID_HW_REV); int consoleRevId = regs[2] & 0xFFFF; char *consoleRev = (char *)calloc(1, 0x100); switch (consoleRevId) { case HW_REV_DURANGO: consoleRev = \"Durango\"; break; case HW_REV_SILVERTON_ZORRO: consoleRev = \"Silverton Zorro\"; break; case HW_REV_SILVERTON_MANDA: consoleRev = \"Silverton Manda\"; break; case HW_REV_CARMEL_BASE: consoleRev = \"Carmel Base\"; break; case HW_REV_CARMEL_4K: consoleRev = \"Carmel 4K\"; break; case HW_REV_EDMONTON: consoleRev = \"Edmonton\"; break; case HW_REV_SCORPIO: consoleRev = \"Scorpio\"; break; default: consoleRev = \"Unknown\"; } printf(\"Console Revision: %s (0x%04X)\\n\", consoleRev, consoleRevId); Physical identification Not known yet","title":"Console revisions"},{"location":"console-revisions/#console-revisions","text":"","title":"Console revisions"},{"location":"console-revisions/#revisions","text":"Revision Enum Information DURANGO 0x10 First retail revision. SILVERTON ZORRO 0x20 TBD SILVERTON MANDA 0x21 TBD CARMEL BASE 0x30 TBD CARMEL 4K 0x31 TBD EDMONTON 0x40 TBD SCORPIO 0x50 TBD","title":"Revisions"},{"location":"console-revisions/#reading-revision-via-software","text":"C code #define CPUID_HW_REV 0x4000000D #define HW_REV_DURANGO 0x10 #define HW_REV_SILVERTON_ZORRO 0x20 #define HW_REV_SILVERTON_MANDA 0x21 #define HW_REV_CARMEL_BASE 0x30 #define HW_REV_CARMEL_4K 0x31 #define HW_REV_EDMONTON 0x40 #define HW_REV_SCORPIO 0x50 int regs[4]; __cpuid(regs, CPUID_HW_REV); int consoleRevId = regs[2] & 0xFFFF; char *consoleRev = (char *)calloc(1, 0x100); switch (consoleRevId) { case HW_REV_DURANGO: consoleRev = \"Durango\"; break; case HW_REV_SILVERTON_ZORRO: consoleRev = \"Silverton Zorro\"; break; case HW_REV_SILVERTON_MANDA: consoleRev = \"Silverton Manda\"; break; case HW_REV_CARMEL_BASE: consoleRev = \"Carmel Base\"; break; case HW_REV_CARMEL_4K: consoleRev = \"Carmel 4K\"; break; case HW_REV_EDMONTON: consoleRev = \"Edmonton\"; break; case HW_REV_SCORPIO: consoleRev = \"Scorpio\"; break; default: consoleRev = \"Unknown\"; } printf(\"Console Revision: %s (0x%04X)\\n\", consoleRev, consoleRevId);","title":"Reading revision via software"},{"location":"console-revisions/#physical-identification","text":"Not known yet","title":"Physical identification"},{"location":"cpu/","text":"CPU An AMD Jaguar APU is used on all Xbox One consoles. It features an embedded Radeon GPU. Models AMD \"Jaguar\" 8-core APU X887732-001 DG3001FEG84HR (Xbox One) AMD \"Jaguar\" 8-Core APU (CPU clock: 1,75 GHz, GPU clock: 914 MHz) X949211-001 DG4001FYG87IA (Xbox One S) AMD \"Jaguar\" 8-Core APU (CPU clock: 2.3 GHz, GPU block: 1.17 GHz) X950118-002 DG5700GDA87IE (Xbox One X) Diagrams References Southbridge / SoC diagram by IEEE Computer Society","title":"CPU"},{"location":"cpu/#cpu","text":"An AMD Jaguar APU is used on all Xbox One consoles. It features an embedded Radeon GPU.","title":"CPU"},{"location":"cpu/#models","text":"AMD \"Jaguar\" 8-core APU X887732-001 DG3001FEG84HR (Xbox One) AMD \"Jaguar\" 8-Core APU (CPU clock: 1,75 GHz, GPU clock: 914 MHz) X949211-001 DG4001FYG87IA (Xbox One S) AMD \"Jaguar\" 8-Core APU (CPU clock: 2.3 GHz, GPU block: 1.17 GHz) X950118-002 DG5700GDA87IE (Xbox One X)","title":"Models"},{"location":"cpu/#diagrams","text":"","title":"Diagrams"},{"location":"cpu/#references","text":"Southbridge / SoC diagram by IEEE Computer Society","title":"References"},{"location":"development/","text":"Development Projects XRF XRF is a small utility written for the Xbox One System OS. xvdtool A command-line tool for manipulating Xbox One XVD & XVC files. Resources Installing Compatible software","title":"Development"},{"location":"development/#development","text":"","title":"Development"},{"location":"development/#projects","text":"XRF XRF is a small utility written for the Xbox One System OS. xvdtool A command-line tool for manipulating Xbox One XVD & XVC files.","title":"Projects"},{"location":"development/#resources","text":"Installing Compatible software","title":"Resources"},{"location":"devkit-types/","text":"Devkit types There are different types of devkits Name Identification Description SRA (UWP) Devkit 0x2001 SRA (Shared Resources Access) devkit, also known as UWA (Unified Windows Access) is the publicly available form of a Xbox One devkit. You can develop UWP applications to run in SystemOS. ERA Devkit 0x4001 ERA (Exclusive Resources Access) devkit can develop games that utilize full console performance and run in GameOS/ExclusiveOS layer. MS Devkit 0x6001 MS devkit, unknown usage. SP Devkit 0x8001 SP (Security Processor?) devkit, mabye for testing Security processor hardening?.","title":"Devkit types"},{"location":"devkit-types/#devkit-types","text":"There are different types of devkits Name Identification Description SRA (UWP) Devkit 0x2001 SRA (Shared Resources Access) devkit, also known as UWA (Unified Windows Access) is the publicly available form of a Xbox One devkit. You can develop UWP applications to run in SystemOS. ERA Devkit 0x4001 ERA (Exclusive Resources Access) devkit can develop games that utilize full console performance and run in GameOS/ExclusiveOS layer. MS Devkit 0x6001 MS devkit, unknown usage. SP Devkit 0x8001 SP (Security Processor?) devkit, mabye for testing Security processor hardening?.","title":"Devkit types"},{"location":"devmode-priv-escalation-vsprofiling/","text":"SystemOS Elevation of privileges via VSProfiling account Metadata Release date N/A Author Xbox One Research Classification Elevation of privileges Patched yes Patch date N/A First patched system version N/A Source N/A Download N/A Info Previously dev mode let us use the devtoolslauncher program to start a \"slightly elevated\" process. After this registry could be modified. This way it was possible to rewrite process execution path of the bootsh service to start a full-privileged process. This writeup explains how to start a \"slightly privileged\" on port 24 and a full-privileged telnet daemon on port 23. Prerequisites Dev Mode Shell access Instructions SSH to your console as DevToolsUser and VS Pairing Pin as password. Execute the following command to start a telnet-daemon on port 24 as User \"VSProfilingAccount\". devtoolslauncher LaunchForProfiling telnetd \"cmd.exe 24\" Start a telnet connection to Port 24 Execute the following commands on this telnet connection, this will start a telnet daemon on port 23 as local administrator: REG ADD HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\Bootsh\\Parameters\\Commands /v Xrun /t REG_SZ /d \"telnetd.exe cmd.exe 23\" /f sc start bootsh Wait 10 seconds to make sure bootsh service started completely Now reset the registry-value to it's standard value by executing the following REG ADD HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\Bootsh\\Parameters\\Commands /v Xrun /t REG_SZ /d \"xrun.exe SystemBootTasks\" /f Start a new telnet connection to Port 23 - That's our awaited SYSTEM -shell","title":"SystemOS Elevation of privileges via VSProfiling account"},{"location":"devmode-priv-escalation-vsprofiling/#systemos-elevation-of-privileges-via-vsprofiling-account","text":"","title":"SystemOS Elevation of privileges via VSProfiling account"},{"location":"devmode-priv-escalation-vsprofiling/#metadata","text":"Release date N/A Author Xbox One Research Classification Elevation of privileges Patched yes Patch date N/A First patched system version N/A Source N/A Download N/A","title":"Metadata"},{"location":"devmode-priv-escalation-vsprofiling/#info","text":"Previously dev mode let us use the devtoolslauncher program to start a \"slightly elevated\" process. After this registry could be modified. This way it was possible to rewrite process execution path of the bootsh service to start a full-privileged process. This writeup explains how to start a \"slightly privileged\" on port 24 and a full-privileged telnet daemon on port 23.","title":"Info"},{"location":"devmode-priv-escalation-vsprofiling/#prerequisites","text":"Dev Mode Shell access","title":"Prerequisites"},{"location":"devmode-priv-escalation-vsprofiling/#instructions","text":"SSH to your console as DevToolsUser and VS Pairing Pin as password. Execute the following command to start a telnet-daemon on port 24 as User \"VSProfilingAccount\". devtoolslauncher LaunchForProfiling telnetd \"cmd.exe 24\" Start a telnet connection to Port 24 Execute the following commands on this telnet connection, this will start a telnet daemon on port 23 as local administrator: REG ADD HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\Bootsh\\Parameters\\Commands /v Xrun /t REG_SZ /d \"telnetd.exe cmd.exe 23\" /f sc start bootsh Wait 10 seconds to make sure bootsh service started completely Now reset the registry-value to it's standard value by executing the following REG ADD HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\Bootsh\\Parameters\\Commands /v Xrun /t REG_SZ /d \"xrun.exe SystemBootTasks\" /f Start a new telnet connection to Port 23 - That's our awaited SYSTEM -shell","title":"Instructions"},{"location":"devmode-systemxvd-read-write/","text":"SystemOS Read/Write overlay for System.xvd Metadata Release date 31.07.2019 Author Xbox One Research Classification Privileged write access Patched no Patch date N/A First patched system version N/A Source Discord Download Download Info The \"System Boot Partition\" aka. C:* is mounted read-only. This hack allows temporary mounting of a self-created XVD as an overlay under mountpoint C:*. It enables write access to this partition. Prerequisites Dev Mode Elevated privileges Instructions Copy the extracted files to the console and execute them via cmdline.","title":"SystemOS Read/Write overlay for System.xvd"},{"location":"devmode-systemxvd-read-write/#systemos-readwrite-overlay-for-systemxvd","text":"","title":"SystemOS Read/Write overlay for System.xvd"},{"location":"devmode-systemxvd-read-write/#metadata","text":"Release date 31.07.2019 Author Xbox One Research Classification Privileged write access Patched no Patch date N/A First patched system version N/A Source Discord Download Download","title":"Metadata"},{"location":"devmode-systemxvd-read-write/#info","text":"The \"System Boot Partition\" aka. C:* is mounted read-only. This hack allows temporary mounting of a self-created XVD as an overlay under mountpoint C:*. It enables write access to this partition.","title":"Info"},{"location":"devmode-systemxvd-read-write/#prerequisites","text":"Dev Mode Elevated privileges","title":"Prerequisites"},{"location":"devmode-systemxvd-read-write/#instructions","text":"Copy the extracted files to the console and execute them via cmdline.","title":"Instructions"},{"location":"devmode-unattended-utilities/","text":"SystemOS - Elevation of privileges via UnattendedUtilities Metadata Release date 10.09.2019 Author Xbox One Research Classification Elevation of privileges Patched yes Patch date 19/11/2019 First patched system version 10.0.18363.8119 (19h1_release_xbox_dev_1911.18363.8119.191119-1135) Source https://github.com/xboxoneresearch/XboxUnattend Download Download Info Normally you have limited user rights when connecting via SSH in development mode. Via WinRT/COM Interop you can access UnattendedUtilities assembly and use it's script execution framework. All commands executed by unattended scripts are done with local administrator rights . Prerequisites Dev Mode Instructions Copy the extracted files to the console and the desired script to execute to the console. For a script supplied via usb flash drive, execute: xboxunattend.exe -usb For a script in an arbitrary location xboxunattend.exe -script D:\\DevelopmentFiles\\myscript.cmd","title":"SystemOS - Elevation of privileges via UnattendedUtilities"},{"location":"devmode-unattended-utilities/#systemos-elevation-of-privileges-via-unattendedutilities","text":"","title":"SystemOS - Elevation of privileges via UnattendedUtilities"},{"location":"devmode-unattended-utilities/#metadata","text":"Release date 10.09.2019 Author Xbox One Research Classification Elevation of privileges Patched yes Patch date 19/11/2019 First patched system version 10.0.18363.8119 (19h1_release_xbox_dev_1911.18363.8119.191119-1135) Source https://github.com/xboxoneresearch/XboxUnattend Download Download","title":"Metadata"},{"location":"devmode-unattended-utilities/#info","text":"Normally you have limited user rights when connecting via SSH in development mode. Via WinRT/COM Interop you can access UnattendedUtilities assembly and use it's script execution framework. All commands executed by unattended scripts are done with local administrator rights .","title":"Info"},{"location":"devmode-unattended-utilities/#prerequisites","text":"Dev Mode","title":"Prerequisites"},{"location":"devmode-unattended-utilities/#instructions","text":"Copy the extracted files to the console and the desired script to execute to the console. For a script supplied via usb flash drive, execute: xboxunattend.exe -usb For a script in an arbitrary location xboxunattend.exe -script D:\\DevelopmentFiles\\myscript.cmd","title":"Instructions"},{"location":"eMMC---Flash/","text":"eMMC / Flash The flash chip is accessed via an eMMC controller. Filesystem See XBFS . Flash chips SK Hynix H26M42003GMR 8GB eMMC NAND Flash (Xbox One) Toshiba THGBMFG6C1LBAIL 8 GB eMMC NAND Flash (Xbox One S) Reading eMMC via hardware Durango Motherboard overview: Mainboard top view Mainboard bottom view SD Card Connections: Important: For the x2 GND wires use 12 AWG. For the other connections use 28 AWG. 2 = CMD 3 = GND 5 = CLK 6 = GND 7 = DAT0 Enable SMC_RESET ( VERY IMPORTANT TO DO THIS FIRST!! ) Place a 200-300 Ohm resistor between J4E1.1 and TP4E1 Enabling SMC_RESET Disconnect the SMC clock from the Southbridge by removing R4D2 . Save the resistor as it is needed for the Xbox One to function. If you do lose it then a solder bridge should work as the value is 0 Ohms. Disconnecting SMC clock NAND logic runs on the 1.8v rail and readers try to use 3.3v which is most of them don't work with the Xbox One NAND. Bridge a 700-800 Ohm resistor between Pin 1 of U3C3 and Ground . This should make an output 3v3 on the rail without damaging anything because the SMC is held in reset, so it won't try to power anything on. Getting voltage to 3,3V Directly underneath the NAND on the underside of the mobo are access points that will let you easily solder the CMD , DAT0 and CLK lines. Everything works better when you hook everything up to the SD reader with everything turned off, then turn the Xbox One on and then plug in the SD reader to the PC. GND solder points eMMC communication points Source: Team Xecuter / xpgamesaves References SK Hynix H26M42003GMR","title":"eMMC / Flash"},{"location":"eMMC---Flash/#emmc-flash","text":"The flash chip is accessed via an eMMC controller.","title":"eMMC / Flash"},{"location":"eMMC---Flash/#filesystem","text":"See XBFS .","title":"Filesystem"},{"location":"eMMC---Flash/#flash-chips","text":"SK Hynix H26M42003GMR 8GB eMMC NAND Flash (Xbox One) Toshiba THGBMFG6C1LBAIL 8 GB eMMC NAND Flash (Xbox One S)","title":"Flash chips"},{"location":"eMMC---Flash/#reading-emmc-via-hardware","text":"","title":"Reading eMMC via hardware"},{"location":"eMMC---Flash/#durango","text":"Motherboard overview: Mainboard top view Mainboard bottom view SD Card Connections: Important: For the x2 GND wires use 12 AWG. For the other connections use 28 AWG. 2 = CMD 3 = GND 5 = CLK 6 = GND 7 = DAT0 Enable SMC_RESET ( VERY IMPORTANT TO DO THIS FIRST!! ) Place a 200-300 Ohm resistor between J4E1.1 and TP4E1 Enabling SMC_RESET Disconnect the SMC clock from the Southbridge by removing R4D2 . Save the resistor as it is needed for the Xbox One to function. If you do lose it then a solder bridge should work as the value is 0 Ohms. Disconnecting SMC clock NAND logic runs on the 1.8v rail and readers try to use 3.3v which is most of them don't work with the Xbox One NAND. Bridge a 700-800 Ohm resistor between Pin 1 of U3C3 and Ground . This should make an output 3v3 on the rail without damaging anything because the SMC is held in reset, so it won't try to power anything on. Getting voltage to 3,3V Directly underneath the NAND on the underside of the mobo are access points that will let you easily solder the CMD , DAT0 and CLK lines. Everything works better when you hook everything up to the SD reader with everything turned off, then turn the Xbox One on and then plug in the SD reader to the PC. GND solder points eMMC communication points Source: Team Xecuter / xpgamesaves","title":"Durango"},{"location":"eMMC---Flash/#references","text":"SK Hynix H26M42003GMR","title":"References"},{"location":"ethernet/","text":"Ethernet All console revision utilize a gigabit ethernet connection. Chipsets Realtek RTL 8151GNM Ethernet Controller (Xbox One) Realtek RTL8111HM (Xbox One S)","title":"Ethernet"},{"location":"ethernet/#ethernet","text":"All console revision utilize a gigabit ethernet connection.","title":"Ethernet"},{"location":"ethernet/#chipsets","text":"Realtek RTL 8151GNM Ethernet Controller (Xbox One) Realtek RTL8111HM (Xbox One S)","title":"Chipsets"},{"location":"exploits/","text":"Exploits Software Retail HostOS - External VBI loading (19.09.2019) SystemOS Symbolic Link Exploit - Access restricted/encrypted volumes using the Xbox File Explorer (02.06.2017) SystemOS Microsoft Edge - chakra.dll Info Leak (30.03.2017) Development mode SystemOS Read/Write overlay for System.xvd (31.07.2019) SystemOS Elevation of privileges via UnattendedUtilities (11.06.2019) SystemOS Elevation of privileges via VSProfiling account (09.09.2018) SystemOS shell access (09.09.2018) Hardware None so far","title":"Exploits"},{"location":"exploits/#exploits","text":"","title":"Exploits"},{"location":"exploits/#software","text":"","title":"Software"},{"location":"exploits/#retail","text":"HostOS - External VBI loading (19.09.2019) SystemOS Symbolic Link Exploit - Access restricted/encrypted volumes using the Xbox File Explorer (02.06.2017) SystemOS Microsoft Edge - chakra.dll Info Leak (30.03.2017)","title":"Retail"},{"location":"exploits/#development-mode","text":"SystemOS Read/Write overlay for System.xvd (31.07.2019) SystemOS Elevation of privileges via UnattendedUtilities (11.06.2019) SystemOS Elevation of privileges via VSProfiling account (09.09.2018) SystemOS shell access (09.09.2018)","title":"Development mode"},{"location":"exploits/#hardware","text":"None so far","title":"Hardware"},{"location":"external-vbi-loading/","text":"External VBI Loading Metadata Release date 19.09.2019 Author Xbox One Research Classification Code Execution Patched Yes Patch date 01.07.2017 First patched system version N/A Source N/A Download N/A Info Force the console to load an arbritary VBI on bootup. By placing a VBI file on the User Content partition of the hard drive and using either of the following names \"system.vbi\" or \"era.vbi\" will be used to boot their according virtual machines upon console boot. This is done by the XVMM driver in the Host operating system which checks the locations \"E:\\system.vbi\" and/or \"E:\\era.vbi\" for any valid binaries. If any of these exist then it will default to using them rather than using the VBI from the OS XVD user data section. Prerequisites Access to console hard drive Access to specific VBI Instructions Place the custom VBI on the User Content partition of the hard drive Plug hard drive back into the console Reboot the console","title":"External VBI Loading"},{"location":"external-vbi-loading/#external-vbi-loading","text":"","title":"External VBI Loading"},{"location":"external-vbi-loading/#metadata","text":"Release date 19.09.2019 Author Xbox One Research Classification Code Execution Patched Yes Patch date 01.07.2017 First patched system version N/A Source N/A Download N/A","title":"Metadata"},{"location":"external-vbi-loading/#info","text":"Force the console to load an arbritary VBI on bootup. By placing a VBI file on the User Content partition of the hard drive and using either of the following names \"system.vbi\" or \"era.vbi\" will be used to boot their according virtual machines upon console boot. This is done by the XVMM driver in the Host operating system which checks the locations \"E:\\system.vbi\" and/or \"E:\\era.vbi\" for any valid binaries. If any of these exist then it will default to using them rather than using the VBI from the OS XVD user data section.","title":"Info"},{"location":"external-vbi-loading/#prerequisites","text":"Access to console hard drive Access to specific VBI","title":"Prerequisites"},{"location":"external-vbi-loading/#instructions","text":"Place the custom VBI on the User Content partition of the hard drive Plug hard drive back into the console Reboot the console","title":"Instructions"},{"location":"faq/","text":"FAQ How to contribute to the Wiki? Contact an admin on the Discord server and explain your motivation and expertise to get authorized with your github account or simply send pull requests to https://github.com/XboxOneResearch/wiki What's different between Dev Mode and Retail? The bootslot is determined based on whether or not your console was started in Developer Mode or Retail which will set the target the bootslot for booting up. Initially there was two slots known as Bootslot \"A\" and \"B\" - with recent updates it appears that a third slot has been added known as Bootslot \"C\" , which purpose is actually unknown. Dev Mode is mostly seperated from Retail mode. The windows registry is built up dynamically for each mode, SystemOS partition (system.xvd) is mounted ReadOnly and settings is seperated into settings.xvd and settings-devkit.xvd. It is important to note that developer mode and retail share very little to none in regards to its operating system files. It is configured at the lowest level which determines what your console can and cannot do. OS sandboxes As the console is built with security in mind, the OS layers are seperated in sandboxes. The system used is known as ''Hydra'' and is supposed to be based on HyperV - with 80% of code written specifically for the use on the Xbox One gaming console. The base operating system is HostOS, which runs drivers to interact with the hardware and communicate with other OS layers to exchange data / commands. SystemOS or ExclusiveOS/EraOS are preparing data to render and interact with the user. Is there telemetry being sent? YES! Basically every single thing is logged and transmitted to telemetry servers. In Dev Mode it appears to be possible to deactivate those services manually, The telemetry data that they send in developer mode will be more intense than retail, due to the nature of capturing as much data in regards to the tool usage. However, being in a preview program will also increase the data being sent. When can I mod games? Not a target of this project! While this is not in our own priorities, this is will be subject to a future console exploit. How does the guest virtual machines communicate with the Host? Named pipes / special kernel broker drivers are used to push data between the OS layers. ... The Xbox One is known to currently use a driver common on all OS VMs known as \"XVIO\" which appear to use shared memory ring buffers to communicate between the host and guest virtual machines. Can we draw standard Win32 UI? The possibility of \"escaping\" the UWP sandbox thats originally targeted at homebrew developers is tempting and of course delivers a bigger potential for developers to port applications more easily. However, as the rendering is done in a non-Win32-conform way, it is also a challenge to achieve displaying such Win32 GUI application. See XboxUI for further info. The current Shell UI that is used on the console disables the standard features we see on desktop-based Windows applications, with the Window Chrome that contains the title, minimize, maximize and close buttons. Where and how do we get the keys? Getting the keys to the kingdom is a topic that requires much more information and skills. The Xbox One uses the AMD Platform Security Processor (aka PSP), which appears to be designed specifically for Xbox based security and other features, which initialises the boot chain and stores the key(s) in the fuses. However, it also appears that there might be certain content keys stored in the System Kernel Memory and also Host Kernel Memory but this is hard to determine without comprehensive tools. Keys are are stored in '\"keyslots\" and are loaded depending on the bootslot / bootmode - this means booting to developer mode just loads the developer keyslot - retails keys wont be loaded and are not accessible for decryption. There are at least two keyslots as far as we know. - Retail (Green) - Development (Red) Different keys are used for the following purposes: - Bootloader encryption - Operating system container encryption (ODK / Offline distribution keys) - Games / apps (CIK / Content integrity keys) Certificates There are at least two major certificates utilized for generic usage: Console certificate and Boot capability certificate. Of course they are signed with an RSA key and therefore cannot be modified. For further info see Certificates . Reset Glitch hack? A power glitch hack that made hacking the Xbox 360 feasible for the public was an unforseen technique that led to breaking the secure boot chain of trust Info You could say that the designers of the console, that appeared in the end of 2005, were not aware of this possibility. Obviously technique and mitigations evolved since that time, so it is a lot harder to pull off such an attack on the modern Xbox One console. It is expected to have a lot of mitigations implemented (for example: timing checks, excessive data validity checks etc.) There was an Edge exploit - Why did nothing come out of it? Edge, while being a privileged UWP process, still runs in the usual UWP sandbox. Additionally, it is only allowed to communicate with the internet or local network if a valid Xbox Live connection is detected. This means that the operated console has to be running the latest mandatory Systemupdate - exploitation cannot happen offline / undetected.","title":"FAQ"},{"location":"faq/#faq","text":"","title":"FAQ"},{"location":"faq/#how-to-contribute-to-the-wiki","text":"Contact an admin on the Discord server and explain your motivation and expertise to get authorized with your github account or simply send pull requests to https://github.com/XboxOneResearch/wiki","title":"How to contribute to the Wiki?"},{"location":"faq/#whats-different-between-dev-mode-and-retail","text":"The bootslot is determined based on whether or not your console was started in Developer Mode or Retail which will set the target the bootslot for booting up. Initially there was two slots known as Bootslot \"A\" and \"B\" - with recent updates it appears that a third slot has been added known as Bootslot \"C\" , which purpose is actually unknown. Dev Mode is mostly seperated from Retail mode. The windows registry is built up dynamically for each mode, SystemOS partition (system.xvd) is mounted ReadOnly and settings is seperated into settings.xvd and settings-devkit.xvd. It is important to note that developer mode and retail share very little to none in regards to its operating system files. It is configured at the lowest level which determines what your console can and cannot do.","title":"What's different between Dev Mode and Retail?"},{"location":"faq/#os-sandboxes","text":"As the console is built with security in mind, the OS layers are seperated in sandboxes. The system used is known as ''Hydra'' and is supposed to be based on HyperV - with 80% of code written specifically for the use on the Xbox One gaming console. The base operating system is HostOS, which runs drivers to interact with the hardware and communicate with other OS layers to exchange data / commands. SystemOS or ExclusiveOS/EraOS are preparing data to render and interact with the user.","title":"OS sandboxes"},{"location":"faq/#is-there-telemetry-being-sent","text":"YES! Basically every single thing is logged and transmitted to telemetry servers. In Dev Mode it appears to be possible to deactivate those services manually, The telemetry data that they send in developer mode will be more intense than retail, due to the nature of capturing as much data in regards to the tool usage. However, being in a preview program will also increase the data being sent.","title":"Is there telemetry being sent?"},{"location":"faq/#when-can-i-mod-games","text":"Not a target of this project! While this is not in our own priorities, this is will be subject to a future console exploit.","title":"When can I mod games?"},{"location":"faq/#how-does-the-guest-virtual-machines-communicate-with-the-host","text":"Named pipes / special kernel broker drivers are used to push data between the OS layers. ... The Xbox One is known to currently use a driver common on all OS VMs known as \"XVIO\" which appear to use shared memory ring buffers to communicate between the host and guest virtual machines.","title":"How does the guest virtual machines communicate with the Host?"},{"location":"faq/#can-we-draw-standard-win32-ui","text":"The possibility of \"escaping\" the UWP sandbox thats originally targeted at homebrew developers is tempting and of course delivers a bigger potential for developers to port applications more easily. However, as the rendering is done in a non-Win32-conform way, it is also a challenge to achieve displaying such Win32 GUI application. See XboxUI for further info. The current Shell UI that is used on the console disables the standard features we see on desktop-based Windows applications, with the Window Chrome that contains the title, minimize, maximize and close buttons.","title":"Can we draw standard Win32 UI?"},{"location":"faq/#where-and-how-do-we-get-the-keys","text":"Getting the keys to the kingdom is a topic that requires much more information and skills. The Xbox One uses the AMD Platform Security Processor (aka PSP), which appears to be designed specifically for Xbox based security and other features, which initialises the boot chain and stores the key(s) in the fuses. However, it also appears that there might be certain content keys stored in the System Kernel Memory and also Host Kernel Memory but this is hard to determine without comprehensive tools. Keys are are stored in '\"keyslots\" and are loaded depending on the bootslot / bootmode - this means booting to developer mode just loads the developer keyslot - retails keys wont be loaded and are not accessible for decryption. There are at least two keyslots as far as we know. - Retail (Green) - Development (Red) Different keys are used for the following purposes: - Bootloader encryption - Operating system container encryption (ODK / Offline distribution keys) - Games / apps (CIK / Content integrity keys)","title":"Where and how do we get the keys?"},{"location":"faq/#certificates","text":"There are at least two major certificates utilized for generic usage: Console certificate and Boot capability certificate. Of course they are signed with an RSA key and therefore cannot be modified. For further info see Certificates .","title":"Certificates"},{"location":"faq/#reset-glitch-hack","text":"A power glitch hack that made hacking the Xbox 360 feasible for the public was an unforseen technique that led to breaking the secure boot chain of trust Info You could say that the designers of the console, that appeared in the end of 2005, were not aware of this possibility. Obviously technique and mitigations evolved since that time, so it is a lot harder to pull off such an attack on the modern Xbox One console. It is expected to have a lot of mitigations implemented (for example: timing checks, excessive data validity checks etc.)","title":"Reset Glitch hack?"},{"location":"faq/#there-was-an-edge-exploit-why-did-nothing-come-out-of-it","text":"Edge, while being a privileged UWP process, still runs in the usual UWP sandbox. Additionally, it is only allowed to communicate with the internet or local network if a valid Xbox Live connection is detected. This means that the operated console has to be running the latest mandatory Systemupdate - exploitation cannot happen offline / undetected.","title":"There was an Edge exploit - Why did nothing come out of it?"},{"location":"file-explorer-symbolic-links/","text":"File Explorer - Symbolic links vulnerability Metadata Release date 02.06.2017 Author xenomega Classification File Access Patched yes Patch date 05.05.2017 First patched system version 10.0.15063.2022 (RS2_RELEASE_XBOX_1704.170501-1052) Source https://github.com/Xenomega/xsymlink Download Download Info Access restricted/encrypted volumes using the Xbox File Explorer. Patched as of 5/5/2017: 10.0.15063.2022 (RS2_RELEASE_XBOX_1704.170501-1052). Thus in accordance with responsible disclosure. The Xbox One File Explorer does not check if a path is a symbolic link elsewhere, allowing an attacker to browse/read/write to mounted volumes which are normally restricted. This includes any encrypted virtual harddisk partitions (XVD files) which the console mounts for content such as gamesaves, etc. Prerequisites Download Windows Server 2003 Resource Kit Tools, from which you'll need the \"linkd\" utility, as the program relies on it to create links, since mklink does not link to paths that do not exists, and the paths we intend to link to are likely non-existent on your computer. Instructions Change the drive letter to your USB drive letter in Program.cs Run it Plug it into Xbox, use File Browser to browse through the symlinks, which will link to other parts of the system.","title":"File Explorer - Symbolic links vulnerability"},{"location":"file-explorer-symbolic-links/#file-explorer-symbolic-links-vulnerability","text":"","title":"File Explorer - Symbolic links vulnerability"},{"location":"file-explorer-symbolic-links/#metadata","text":"Release date 02.06.2017 Author xenomega Classification File Access Patched yes Patch date 05.05.2017 First patched system version 10.0.15063.2022 (RS2_RELEASE_XBOX_1704.170501-1052) Source https://github.com/Xenomega/xsymlink Download Download","title":"Metadata"},{"location":"file-explorer-symbolic-links/#info","text":"Access restricted/encrypted volumes using the Xbox File Explorer. Patched as of 5/5/2017: 10.0.15063.2022 (RS2_RELEASE_XBOX_1704.170501-1052). Thus in accordance with responsible disclosure. The Xbox One File Explorer does not check if a path is a symbolic link elsewhere, allowing an attacker to browse/read/write to mounted volumes which are normally restricted. This includes any encrypted virtual harddisk partitions (XVD files) which the console mounts for content such as gamesaves, etc.","title":"Info"},{"location":"file-explorer-symbolic-links/#prerequisites","text":"Download Windows Server 2003 Resource Kit Tools, from which you'll need the \"linkd\" utility, as the program relies on it to create links, since mklink does not link to paths that do not exists, and the paths we intend to link to are likely non-existent on your computer.","title":"Prerequisites"},{"location":"file-explorer-symbolic-links/#instructions","text":"Change the drive letter to your USB drive letter in Program.cs Run it Plug it into Xbox, use File Browser to browse through the symlinks, which will link to other parts of the system.","title":"Instructions"},{"location":"harddrive/","text":"Harddrive The console comes with an integrated harddrive and also supports external harddrives via USB 3.0. Using an external harddrive to store apps and games requires the drive to be USB 3.0 and storage to be 128GB or bigger. Both, either internal or external, drive use GUID/GPT partitioning scheme and NTFS as drive format. An external USB 3.0 drive, after being formatted on the console, is normally non-accessible on a PC due to a non-standard Boot Signature being written to the first sector of the drive. Internal harddrive The console supports 500GB, 1TB and 2TB harddrives (state: 09/2019). Internal harddrive uses specific partition GUIDs and partition labels. Partitions Temp Content User Content System Support System Update System Update 2 Partition GUIDs Name / Part Label Guid Size (bytes) Size (GB) Temp Content B3727DA5-A3AC-4B3D-9FD6-2EA54441011B 44023414784 41 User Content variable variable variable System Support C90D7A47-CCB9-4CBA-8C66-0459F6B85724 42949672960 40 System Update 9A056AD7-32ED-4141-AEB1-AFB9BD5565DC 12884901888 12 System Update 2 24B2197C-9D01-45F9-A8E1-DBBCFA161EB2 7516192768 7 User partition GUIDs Harddrive size Guid Partition size (bytes) Partition size (GB) 500 GB A2344BDB-D6DE-4766-9EB5-4109A12228E5 391915765760 365 1 TB 25E8A1B2-0B2A-4474-93FA-35B847D97EE5 838592364544 781 2 TB 5B114955-4A1C-45C4-86DC-D95070008139 1784558911488 1662 External harddrive When a USB 3.0 drive is formatted for apps/games usage by the console, it gets rendered unreadable by a PC by writing a special, non-standard boot signature. By overwriting the custom xbox signature with the regular, expected bytes makes the drive being recognized and mountable on a PC. Boot signature marker The boot signature is located in the first sector of the drive at offset: 0x1FE Type Boot signature Regular (MBR) 55 AA Xbox One 99 CC Note: Even if 55 AA indicates MBR normally, for GPT it is just marking the \"Protective MBR\", to secure GUID partition against ovewriting by non-GPT aware applications.","title":"Harddrive"},{"location":"harddrive/#harddrive","text":"The console comes with an integrated harddrive and also supports external harddrives via USB 3.0. Using an external harddrive to store apps and games requires the drive to be USB 3.0 and storage to be 128GB or bigger. Both, either internal or external, drive use GUID/GPT partitioning scheme and NTFS as drive format. An external USB 3.0 drive, after being formatted on the console, is normally non-accessible on a PC due to a non-standard Boot Signature being written to the first sector of the drive.","title":"Harddrive"},{"location":"harddrive/#internal-harddrive","text":"The console supports 500GB, 1TB and 2TB harddrives (state: 09/2019). Internal harddrive uses specific partition GUIDs and partition labels.","title":"Internal harddrive"},{"location":"harddrive/#partitions","text":"Temp Content User Content System Support System Update System Update 2","title":"Partitions"},{"location":"harddrive/#partition-guids","text":"Name / Part Label Guid Size (bytes) Size (GB) Temp Content B3727DA5-A3AC-4B3D-9FD6-2EA54441011B 44023414784 41 User Content variable variable variable System Support C90D7A47-CCB9-4CBA-8C66-0459F6B85724 42949672960 40 System Update 9A056AD7-32ED-4141-AEB1-AFB9BD5565DC 12884901888 12 System Update 2 24B2197C-9D01-45F9-A8E1-DBBCFA161EB2 7516192768 7","title":"Partition GUIDs"},{"location":"harddrive/#user-partition-guids","text":"Harddrive size Guid Partition size (bytes) Partition size (GB) 500 GB A2344BDB-D6DE-4766-9EB5-4109A12228E5 391915765760 365 1 TB 25E8A1B2-0B2A-4474-93FA-35B847D97EE5 838592364544 781 2 TB 5B114955-4A1C-45C4-86DC-D95070008139 1784558911488 1662","title":"User partition GUIDs"},{"location":"harddrive/#external-harddrive","text":"When a USB 3.0 drive is formatted for apps/games usage by the console, it gets rendered unreadable by a PC by writing a special, non-standard boot signature. By overwriting the custom xbox signature with the regular, expected bytes makes the drive being recognized and mountable on a PC.","title":"External harddrive"},{"location":"harddrive/#boot-signature-marker","text":"The boot signature is located in the first sector of the drive at offset: 0x1FE Type Boot signature Regular (MBR) 55 AA Xbox One 99 CC Note: Even if 55 AA indicates MBR normally, for GPT it is just marking the \"Protective MBR\", to secure GUID partition against ovewriting by non-GPT aware applications.","title":"Boot signature marker"},{"location":"installing-compatible-software/","text":"Installing compatible software Python Download https://www.python.org/ftp/python/3.7.3/python-3.7.3-embed-amd64.zip Unzip Uncomment \"import site\" in file python37._pth Download get-pip.py (https://bootstrap.pypa.io/get-pip.py) and place it inside extracted python folder Copy extracted folder to console Execute: set PYTHONPATH=\"D:\\DevelopmentFiles\\Python\" set PATH=\"%PATH%;%PYTHONPATH%\" Execute python.exe get-pip.py Profit PowerShell Download: https://github.com/PowerShell/PowerShell/releases/download/v6.2.0/PowerShell-6.2.0-win-x64.zip Unzip Copy over to console Execute pwsh.exe Profit DotNet Core Download the latest 64 bit dotnet core runtime from https://dotnet.microsoft.com/download/dotnet-core . Unzip and copy the binaries to a flash drive or D:\\DevelopmentFiles\\Dotnet. Optionally add the dotnet directory to your system PATH via setx path \"%path%;D:\\DotnetPath\" using SSH. Execute your dotnet core software via \"dotnet program.exe\" using SSH in the dotnet diectory (or anywhere if you updated your PATH). Profit","title":"Installing compatible software"},{"location":"installing-compatible-software/#installing-compatible-software","text":"","title":"Installing compatible software"},{"location":"installing-compatible-software/#python","text":"Download https://www.python.org/ftp/python/3.7.3/python-3.7.3-embed-amd64.zip Unzip Uncomment \"import site\" in file python37._pth Download get-pip.py (https://bootstrap.pypa.io/get-pip.py) and place it inside extracted python folder Copy extracted folder to console Execute: set PYTHONPATH=\"D:\\DevelopmentFiles\\Python\" set PATH=\"%PATH%;%PYTHONPATH%\" Execute python.exe get-pip.py Profit","title":"Python"},{"location":"installing-compatible-software/#powershell","text":"Download: https://github.com/PowerShell/PowerShell/releases/download/v6.2.0/PowerShell-6.2.0-win-x64.zip Unzip Copy over to console Execute pwsh.exe Profit","title":"PowerShell"},{"location":"installing-compatible-software/#dotnet-core","text":"Download the latest 64 bit dotnet core runtime from https://dotnet.microsoft.com/download/dotnet-core . Unzip and copy the binaries to a flash drive or D:\\DevelopmentFiles\\Dotnet. Optionally add the dotnet directory to your system PATH via setx path \"%path%;D:\\DotnetPath\" using SSH. Execute your dotnet core software via \"dotnet program.exe\" using SSH in the dotnet diectory (or anywhere if you updated your PATH). Profit","title":"DotNet Core"},{"location":"ms-edge-exploit-cve-2016-7200/","text":"Microsoft Edge - Chakra Exploit - CVE 2016-7200 Metadata Release date 28.03.2017 Author unknownv2 Classification Remote Code execution / Type confusion Patched yes Patch date unknown First patched system version unknown Source https://github.com/SeeMirra/ms-xb1-edge-exp Download Download Info For Xbox-SystemOS version: 10.0.14393.2152 (rs1_xbox_rel_1610 161208-1218) fre, 12/14/2016 Other versions will most likely need modifications to the script. Credits: https://github.com/theori-io/chakra-2016-11 https://bugs.chromium.org/p/project-zero/issues/detail?id=952 https://bugs.chromium.org/p/project-zero/issues/detail?id=945","title":"Microsoft Edge - Chakra Exploit - CVE 2016-7200"},{"location":"ms-edge-exploit-cve-2016-7200/#microsoft-edge-chakra-exploit-cve-2016-7200","text":"","title":"Microsoft Edge - Chakra Exploit - CVE 2016-7200"},{"location":"ms-edge-exploit-cve-2016-7200/#metadata","text":"Release date 28.03.2017 Author unknownv2 Classification Remote Code execution / Type confusion Patched yes Patch date unknown First patched system version unknown Source https://github.com/SeeMirra/ms-xb1-edge-exp Download Download","title":"Metadata"},{"location":"ms-edge-exploit-cve-2016-7200/#info","text":"For Xbox-SystemOS version: 10.0.14393.2152 (rs1_xbox_rel_1610 161208-1218) fre, 12/14/2016 Other versions will most likely need modifications to the script.","title":"Info"},{"location":"ms-edge-exploit-cve-2016-7200/#credits","text":"https://github.com/theori-io/chakra-2016-11 https://bugs.chromium.org/p/project-zero/issues/detail?id=952 https://bugs.chromium.org/p/project-zero/issues/detail?id=945","title":"Credits:"},{"location":"optical-disc-drive/","text":"Xbox Optical disc drive Game discs Xbox One game discs are called XGD4 (Xbox Game Disc Version 4). Drive models Following optical disc drive models are known to date: Xbox One (PHAT) Lite-On DG-6M1S-01B/02B (Codename: ELK) Lite-On DG-6M2S-01B (Codename: CORDOVA) Xbox One S / X Lite-On DG-6M5S-01B/02B (Codename: MONTEREY) Lite-On drives General info Seems to use MTK chipset DG-6M1S is NOT detected when connected to a PC, all other models are Known firmware versions 3253 (July 2013, DG-6M1S-01B) 011V (August 2015, DG-6M2S-01B) 017V (April 2016, DG-6M5S-01B) Known flash chips Lite-On DG-6M2S -> MXIC(MX25L8091E) (MenuId: 0xC2, DevId1: 0x20, DevId2: 0x14) oddfwupd log When a dashboard update performs a ODD firmware upgrade, a log file is created on HDD. Location: SystemSupport\\oddfwupd\\ .log : Variable number Successful upgrade ODDFW update sequence: 9. FOUND DeviceInstance AHCI\\Port\\0 Got PDO: \\Device\\00000016 Drive type detected: Elk. Drive is Locked! Nvkey is Programmed! Found firmware FW_0001.bin. Firmware version match, no FW update is needed Update is not neccessary. Drive is Locked! Nvkey is Programmed! ODD token found in factory settings, consider ODD is paired. PV+ console already locked, skip lock down. Got drive auth status : 2 ODDFW update finished, hr = 00000000 Example of E100 error ODDFW update sequence: 7. FOUND DeviceInstance AHCI\\Port\\0 Got PDO: \\Device\\00000017 Drive type detected: Monterey. Drive is Locked! Nvkey is Programmed! Expected firmare version:014R Running firmware version:014R Already running expected firmware, skipping ODD update Update is not neccessary. Not Elk drive, no lock down is needed. Auth IOCTL 000240C4 failed, error = e0e80085 IOddDriverApi::DriveAuthPowerOn failed ODDFW update failed, hr = 80910008, retry again in two seconds. Expected firmare version:014R Running firmware version:014R Already running expected firmware, skipping ODD update Update is not neccessary. Not Elk drive, no lock down is needed. Auth IOCTL 000240C4 failed, error = e0e80085 IOddDriverApi::DriveAuthPowerOn failed ODDFW update failed, hr = 80910008, retry again in two seconds. Expected firmare version:014R Running firmware version:014R Already running expected firmware, skipping ODD update Update is not neccessary. Not Elk drive, no lock down is needed. Auth IOCTL 000240C4 failed, error = e0e80085 IOddDriverApi::DriveAuthPowerOn failed ODDFW update failed, hr = 80910008, retry again in two seconds. ODDFW update finished, hr = 80910008\u200b Unmatching drive ODDFW update sequence: 1. FOUND DeviceInstance AHCI\\Port\\0 Got PDO: \\Device\\00000017 Drive type detected: Elk. Drive is Unlocked! Nvkey is Not programmed! Found firmware FW_0001.bin. Firmware version match, no FW update is needed Update is not neccessary. Drive is Unlocked! Nvkey is Not programmed! OddSerialNumber from factory settings: 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F ----------------------------------------------- 0000 - 44 39 30 31 42 42 33 35 30 38 30 35 30 30 31 4D D901BB350805001M 0010 - 36 20 20 20 6 OddSerialNumber from drive: 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F ----------------------------------------------- 0000 - 44 39 30 33 42 42 34 34 36 38 30 33 30 30 46 36 D903BB44680300F6 0010 - 30 00 00 00 0... PV- console not locked, we are done! Auth IOCTL 000240C4 failed, error = e0e80085 IOddDriverApi::DriveAuthPowerOn failed ODDFW update failed, hr = 80910008, retry again in two seconds. ... Lines above are repeated several times ... ODDFW update finished, hr = 80910008 Again, E100 ODDFW update sequence: 79 FOUND DeviceInstance AHCI\\Port\\0 Got PDO: \\Device\\00000017 Drive type detected: Cordova. Drive is Locked! Nvkey is Programmed! Expected firmare version:045R Running firmware version:040R Not running expected firmware, update required ExclusiveState : None CallerName: MenuId: 0xC2, DevId1: 0x20, DevId2: 0x14 Flash type detected: MXIC(MX25L8091E). OddSerialNumber from factory settings: 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F ----------------------------------------------- 0000 - 44 39 30 33 42 42 34 34 31 38 30 33 30 30 30 50 D903BB441803000P 0010 - 4B 20 20 20 K OddSerialNumber from drive: 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F ----------------------------------------------- 0000 - 44 41 30 31 42 42 35 34 33 38 31 32 30 30 38 58 DA01BB543812008X 0010 - 31 00 00 00 1... Cannot get pair status or drive is not paired! OddFirmwareUpdate error 80910018 Programming firmware failed ExclusiveState : Exclusive CallerName: COddDriverApi ... Lines above are repeated several times ... FW update failed!!! ODDFW update failed, hr = 80910018, retry again in two seconds. ODDFW update finished, hr = 80910018 Philips / Lite-On PLDS DG-6M1S Philips / Lite-On PLDS DG-6M2S","title":"Optical disc drive"},{"location":"optical-disc-drive/#xbox-optical-disc-drive","text":"","title":"Xbox Optical disc drive"},{"location":"optical-disc-drive/#game-discs","text":"Xbox One game discs are called XGD4 (Xbox Game Disc Version 4).","title":"Game discs"},{"location":"optical-disc-drive/#drive-models","text":"Following optical disc drive models are known to date:","title":"Drive models"},{"location":"optical-disc-drive/#xbox-one-phat","text":"Lite-On DG-6M1S-01B/02B (Codename: ELK) Lite-On DG-6M2S-01B (Codename: CORDOVA)","title":"Xbox One (PHAT)"},{"location":"optical-disc-drive/#xbox-one-s-x","text":"Lite-On DG-6M5S-01B/02B (Codename: MONTEREY)","title":"Xbox One S / X"},{"location":"optical-disc-drive/#lite-on-drives","text":"","title":"Lite-On drives"},{"location":"optical-disc-drive/#general-info","text":"Seems to use MTK chipset DG-6M1S is NOT detected when connected to a PC, all other models are","title":"General info"},{"location":"optical-disc-drive/#known-firmware-versions","text":"3253 (July 2013, DG-6M1S-01B) 011V (August 2015, DG-6M2S-01B) 017V (April 2016, DG-6M5S-01B)","title":"Known firmware versions"},{"location":"optical-disc-drive/#known-flash-chips","text":"Lite-On DG-6M2S -> MXIC(MX25L8091E) (MenuId: 0xC2, DevId1: 0x20, DevId2: 0x14)","title":"Known flash chips"},{"location":"optical-disc-drive/#oddfwupd-log","text":"When a dashboard update performs a ODD firmware upgrade, a log file is created on HDD. Location: SystemSupport\\oddfwupd\\ .log : Variable number Successful upgrade ODDFW update sequence: 9. FOUND DeviceInstance AHCI\\Port\\0 Got PDO: \\Device\\00000016 Drive type detected: Elk. Drive is Locked! Nvkey is Programmed! Found firmware FW_0001.bin. Firmware version match, no FW update is needed Update is not neccessary. Drive is Locked! Nvkey is Programmed! ODD token found in factory settings, consider ODD is paired. PV+ console already locked, skip lock down. Got drive auth status : 2 ODDFW update finished, hr = 00000000 Example of E100 error ODDFW update sequence: 7. FOUND DeviceInstance AHCI\\Port\\0 Got PDO: \\Device\\00000017 Drive type detected: Monterey. Drive is Locked! Nvkey is Programmed! Expected firmare version:014R Running firmware version:014R Already running expected firmware, skipping ODD update Update is not neccessary. Not Elk drive, no lock down is needed. Auth IOCTL 000240C4 failed, error = e0e80085 IOddDriverApi::DriveAuthPowerOn failed ODDFW update failed, hr = 80910008, retry again in two seconds. Expected firmare version:014R Running firmware version:014R Already running expected firmware, skipping ODD update Update is not neccessary. Not Elk drive, no lock down is needed. Auth IOCTL 000240C4 failed, error = e0e80085 IOddDriverApi::DriveAuthPowerOn failed ODDFW update failed, hr = 80910008, retry again in two seconds. Expected firmare version:014R Running firmware version:014R Already running expected firmware, skipping ODD update Update is not neccessary. Not Elk drive, no lock down is needed. Auth IOCTL 000240C4 failed, error = e0e80085 IOddDriverApi::DriveAuthPowerOn failed ODDFW update failed, hr = 80910008, retry again in two seconds. ODDFW update finished, hr = 80910008\u200b Unmatching drive ODDFW update sequence: 1. FOUND DeviceInstance AHCI\\Port\\0 Got PDO: \\Device\\00000017 Drive type detected: Elk. Drive is Unlocked! Nvkey is Not programmed! Found firmware FW_0001.bin. Firmware version match, no FW update is needed Update is not neccessary. Drive is Unlocked! Nvkey is Not programmed! OddSerialNumber from factory settings: 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F ----------------------------------------------- 0000 - 44 39 30 31 42 42 33 35 30 38 30 35 30 30 31 4D D901BB350805001M 0010 - 36 20 20 20 6 OddSerialNumber from drive: 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F ----------------------------------------------- 0000 - 44 39 30 33 42 42 34 34 36 38 30 33 30 30 46 36 D903BB44680300F6 0010 - 30 00 00 00 0... PV- console not locked, we are done! Auth IOCTL 000240C4 failed, error = e0e80085 IOddDriverApi::DriveAuthPowerOn failed ODDFW update failed, hr = 80910008, retry again in two seconds. ... Lines above are repeated several times ... ODDFW update finished, hr = 80910008 Again, E100 ODDFW update sequence: 79 FOUND DeviceInstance AHCI\\Port\\0 Got PDO: \\Device\\00000017 Drive type detected: Cordova. Drive is Locked! Nvkey is Programmed! Expected firmare version:045R Running firmware version:040R Not running expected firmware, update required ExclusiveState : None CallerName: MenuId: 0xC2, DevId1: 0x20, DevId2: 0x14 Flash type detected: MXIC(MX25L8091E). OddSerialNumber from factory settings: 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F ----------------------------------------------- 0000 - 44 39 30 33 42 42 34 34 31 38 30 33 30 30 30 50 D903BB441803000P 0010 - 4B 20 20 20 K OddSerialNumber from drive: 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F ----------------------------------------------- 0000 - 44 41 30 31 42 42 35 34 33 38 31 32 30 30 38 58 DA01BB543812008X 0010 - 31 00 00 00 1... Cannot get pair status or drive is not paired! OddFirmwareUpdate error 80910018 Programming firmware failed ExclusiveState : Exclusive CallerName: COddDriverApi ... Lines above are repeated several times ... FW update failed!!! ODDFW update failed, hr = 80910018, retry again in two seconds. ODDFW update finished, hr = 80910018","title":"oddfwupd log"},{"location":"optical-disc-drive/#philips-lite-on-plds-dg-6m1s","text":"","title":"Philips / Lite-On PLDS DG-6M1S"},{"location":"optical-disc-drive/#philips-lite-on-plds-dg-6m2s","text":"","title":"Philips / Lite-On PLDS DG-6M2S"},{"location":"rf-unit/","text":"RF Unit Info Xbox One (PHAT) Part Number: X867281-005 Components: - Infrared Receiver (U1) - Soundchip - ISD9160F (U4) - Connector to sound speaker (J1) - Wifi Antenna connector (J2) - FPC connector (J3) - Motherboard connector (J8) Flashing the soundchip Trumpet project on github Piccolo project on github Xbox One S Xbox One X Pictures Xbox One (PHAT) Xbox One S Xbox One X (SCORPIO) Credits Pictures from ifixit.com","title":"RF Unit"},{"location":"rf-unit/#rf-unit","text":"","title":"RF Unit"},{"location":"rf-unit/#info","text":"","title":"Info"},{"location":"rf-unit/#xbox-one-phat","text":"Part Number: X867281-005 Components: - Infrared Receiver (U1) - Soundchip - ISD9160F (U4) - Connector to sound speaker (J1) - Wifi Antenna connector (J2) - FPC connector (J3) - Motherboard connector (J8)","title":"Xbox One (PHAT)"},{"location":"rf-unit/#flashing-the-soundchip","text":"Trumpet project on github Piccolo project on github","title":"Flashing the soundchip"},{"location":"rf-unit/#xbox-one-s","text":"","title":"Xbox One S"},{"location":"rf-unit/#xbox-one-x","text":"","title":"Xbox One X"},{"location":"rf-unit/#pictures","text":"Xbox One (PHAT) Xbox One S Xbox One X (SCORPIO)","title":"Pictures"},{"location":"rf-unit/#credits","text":"Pictures from ifixit.com","title":"Credits"},{"location":"savegames/","text":"Savegames File format BLOB_TYPE Enum Value Binary 0x1 Json 0x2 Config 0x3 SAVEGAME_TYPE Enum Value User 0x1 Machine 0x5 CONTAINER_INDEX_FILE Structure of containers.index file. Offset Length Type Information 0x00 0x04 uint32 Type 0x08 0x04 uint32 FileCount 0x0C 0x04 uint32 NameLength 0x10 var WCHAR[NameLength] Name var 0x04 uint32 AumIdLength var var WCHAR[AumIdLength] AumId var 0x08 FILETIME Timestamp var 0x04 uint32 Unknown (seen 0, 1, 3 so far) var 0x04 uint32 IdLength var var WCHAR[IdLength] Id var 0x04 uint32 AumIdLength var var CONTAINER_INDEX_FILE[FileCount] Files CONTAINER_INDEX_ENTRY Offset Length Type Information 0x00 0x04 uint32 FilenameLength 0x04 var WCHAR[FilenameLength] Filename var 0x04 uint32 FilenameAltLength var var WCHAR[FilenameAltLength] FilenameAlt var 0x04 uint32 TextLength var var WCHAR[TextLength] Text var 0x01 byte BlobNumber var 0x04 uint32 SaveType var 0x10 byte[] FolderGuid var 0x08 FILETIME Timestamp var 0x08 uint64 Unknown var 0x04 uint32 FileSize var 0x04 uint32 Unknown CONTAINER_BLOB Offset Length Type Information 0x00 0x04 uint32 Unknown 0x04 0x04 uint32 Unknown 0x08 0x08 WCHAR[] Magic (Blob) 0x10 0x88 byte[] Data 0x98 0x10 byte[] GUID","title":"Savegames"},{"location":"savegames/#savegames","text":"","title":"Savegames"},{"location":"savegames/#file-format","text":"","title":"File format"},{"location":"savegames/#blob_type","text":"Enum Value Binary 0x1 Json 0x2 Config 0x3","title":"BLOB_TYPE"},{"location":"savegames/#savegame_type","text":"Enum Value User 0x1 Machine 0x5","title":"SAVEGAME_TYPE"},{"location":"savegames/#container_index_file","text":"Structure of containers.index file. Offset Length Type Information 0x00 0x04 uint32 Type 0x08 0x04 uint32 FileCount 0x0C 0x04 uint32 NameLength 0x10 var WCHAR[NameLength] Name var 0x04 uint32 AumIdLength var var WCHAR[AumIdLength] AumId var 0x08 FILETIME Timestamp var 0x04 uint32 Unknown (seen 0, 1, 3 so far) var 0x04 uint32 IdLength var var WCHAR[IdLength] Id var 0x04 uint32 AumIdLength var var CONTAINER_INDEX_FILE[FileCount] Files","title":"CONTAINER_INDEX_FILE"},{"location":"savegames/#container_index_entry","text":"Offset Length Type Information 0x00 0x04 uint32 FilenameLength 0x04 var WCHAR[FilenameLength] Filename var 0x04 uint32 FilenameAltLength var var WCHAR[FilenameAltLength] FilenameAlt var 0x04 uint32 TextLength var var WCHAR[TextLength] Text var 0x01 byte BlobNumber var 0x04 uint32 SaveType var 0x10 byte[] FolderGuid var 0x08 FILETIME Timestamp var 0x08 uint64 Unknown var 0x04 uint32 FileSize var 0x04 uint32 Unknown","title":"CONTAINER_INDEX_ENTRY"},{"location":"savegames/#container_blob","text":"Offset Length Type Information 0x00 0x04 uint32 Unknown 0x04 0x04 uint32 Unknown 0x08 0x08 WCHAR[] Magic (Blob) 0x10 0x88 byte[] Data 0x98 0x10 byte[] GUID","title":"CONTAINER_BLOB"},{"location":"security-processor/","text":"Platform Security processor (AMD PSP) The AMD Platform Security Processor (PSP) is a self-contained core located on the Xbox CPU die. From official AMD documentation its described as an ARM core, however instead of running TrustZone per AMD's spec it appears to be running MS customized code. It seems that the PSP handles crypto for certain things, and also may use keyslots in a way similar to the Xbox 360's keyvault, except instead of the actual console OS having access to these keys only code running on the PSP can use them. The Xbox One HostOS contacts the PSP through the psp.sys driver. For decrypting XVDs it appears to send the header of the XVD to the PSP, which then (assumably) decrypts the CIK field in the header and sends it back, with the OS performing the rest of the decryption. psp.sys also has commands which seem to read memory from the PSP instead of sending commands to it, the contents of this memory are unknown, but it's possible (albeit unlikely) that the ODK may be in this area of memory. Credits Info from emoose's xvdtool","title":"Security processor"},{"location":"security-processor/#platform-security-processor-amd-psp","text":"The AMD Platform Security Processor (PSP) is a self-contained core located on the Xbox CPU die. From official AMD documentation its described as an ARM core, however instead of running TrustZone per AMD's spec it appears to be running MS customized code. It seems that the PSP handles crypto for certain things, and also may use keyslots in a way similar to the Xbox 360's keyvault, except instead of the actual console OS having access to these keys only code running on the PSP can use them. The Xbox One HostOS contacts the PSP through the psp.sys driver. For decrypting XVDs it appears to send the header of the XVD to the PSP, which then (assumably) decrypts the CIK field in the header and sends it back, with the OS performing the rest of the decryption. psp.sys also has commands which seem to read memory from the PSP instead of sending commands to it, the contents of this memory are unknown, but it's possible (albeit unlikely) that the ODK may be in this area of memory.","title":"Platform Security processor (AMD PSP)"},{"location":"security-processor/#credits","text":"Info from emoose's xvdtool","title":"Credits"},{"location":"setup-dev-mode/","text":"Setup dev mode Prerequisites App Developer Account Dev Mode Activation App Visual Studio 2019 Windows 10 (Preferred) PuTTy Activation Before you get started you will need to convert your console into Developer Mode. Microsoft have an existing page that will show you how to get started: https://docs.microsoft.com/en-us/windows/uwp/xbox-apps/devkit-activation It may be worth navigating through their documentation and getting a grasp on the basis of the environment: https://docs.microsoft.com/en-us/windows/uwp/xbox-apps/ Visual Studio Setup In order for you to build Win32 applications and libraries you will need to install certain libraries available through the Visual Studio Installer: Using SSH After your console is activated you will be able to connect over via PuTTy (or another SSH client of your choice). Enter the console IP address and Connect Use the following to login: Username: DevToolsUser For the password you are able to use either pin that is displayed on the \"Show Visual Studio Pin\" in Dev Home. or password used for smb access Success! This will not give you the sufficient priviliges. Fortunately, there is a way! Requirements USB Drive superfun Make sure that the USB is formatted as NTFS before extracting the superfun contents to the root of it. Once done, you may plug the USB into your Xbox One console. Xbox One Using PuTTy (or your SSH client of choice) connect to the console unless you're already connected Navigate to your USB cd E:\\\\ Execute superfun.exe Voila! An elevated telnet session has been created. Desktop Open Command Prompt as Administrator Enable telnet client by running: DISM /online /enable-feature /featurename:TelnetClient Connect to the console: telnet <Xbox One IP or Hostname> 23 You should now be connected! Navigate to your USB drive Run the following: net1.exe user <username> <password> net1.exe accounts /MaxPWAge:unlimited net1.exe localgroup administrators <username> /add Now you can reconnect to the console via SSH or SMB using your new user. Accessing Console File System Open up the File Explorer on your Windows machine and enter the following into your path bar: \\\\<Xbox One IP or Hostname> It will prompt you for login details. We can use the Xbox Device Portal for this: Open up your web browser and enter: https://<Xbox One IP or Hostname>:11443 Go to File explorer On the right hand side; you will see \"Browse\" Select it and use the login details provided","title":"Setup dev mode"},{"location":"setup-dev-mode/#setup-dev-mode","text":"","title":"Setup dev mode"},{"location":"setup-dev-mode/#prerequisites","text":"App Developer Account Dev Mode Activation App Visual Studio 2019 Windows 10 (Preferred) PuTTy","title":"Prerequisites"},{"location":"setup-dev-mode/#activation","text":"Before you get started you will need to convert your console into Developer Mode. Microsoft have an existing page that will show you how to get started: https://docs.microsoft.com/en-us/windows/uwp/xbox-apps/devkit-activation It may be worth navigating through their documentation and getting a grasp on the basis of the environment: https://docs.microsoft.com/en-us/windows/uwp/xbox-apps/","title":"Activation"},{"location":"setup-dev-mode/#visual-studio-setup","text":"In order for you to build Win32 applications and libraries you will need to install certain libraries available through the Visual Studio Installer:","title":"Visual Studio Setup"},{"location":"setup-dev-mode/#using-ssh","text":"After your console is activated you will be able to connect over via PuTTy (or another SSH client of your choice). Enter the console IP address and Connect Use the following to login: Username: DevToolsUser For the password you are able to use either pin that is displayed on the \"Show Visual Studio Pin\" in Dev Home. or password used for smb access Success! This will not give you the sufficient priviliges. Fortunately, there is a way!","title":"Using SSH"},{"location":"setup-dev-mode/#requirements","text":"USB Drive superfun Make sure that the USB is formatted as NTFS before extracting the superfun contents to the root of it. Once done, you may plug the USB into your Xbox One console.","title":"Requirements"},{"location":"setup-dev-mode/#xbox-one","text":"Using PuTTy (or your SSH client of choice) connect to the console unless you're already connected Navigate to your USB cd E:\\\\ Execute superfun.exe Voila! An elevated telnet session has been created.","title":"Xbox One"},{"location":"setup-dev-mode/#desktop","text":"Open Command Prompt as Administrator Enable telnet client by running: DISM /online /enable-feature /featurename:TelnetClient Connect to the console: telnet <Xbox One IP or Hostname> 23 You should now be connected! Navigate to your USB drive Run the following: net1.exe user <username> <password> net1.exe accounts /MaxPWAge:unlimited net1.exe localgroup administrators <username> /add Now you can reconnect to the console via SSH or SMB using your new user.","title":"Desktop"},{"location":"setup-dev-mode/#accessing-console-file-system","text":"Open up the File Explorer on your Windows machine and enter the following into your path bar: \\\\<Xbox One IP or Hostname> It will prompt you for login details. We can use the Xbox Device Portal for this: Open up your web browser and enter: https://<Xbox One IP or Hostname>:11443 Go to File explorer On the right hand side; you will see \"Browse\" Select it and use the login details provided","title":"Accessing Console File System"},{"location":"southbridge/","text":"Southbridge The custom southbridge is only slightly changed between the console revision, judging from its part number. Models X861949-005 T6WD5XBG-0003 (Xbox One/Xbox One S) X861949-007 T6WD5XBG-0003 (Xbox One X) Diagrams References Southbridge / SoC diagram by IEEE Computer Society","title":"Southbridge"},{"location":"southbridge/#southbridge","text":"The custom southbridge is only slightly changed between the console revision, judging from its part number.","title":"Southbridge"},{"location":"southbridge/#models","text":"X861949-005 T6WD5XBG-0003 (Xbox One/Xbox One S) X861949-007 T6WD5XBG-0003 (Xbox One X)","title":"Models"},{"location":"southbridge/#diagrams","text":"","title":"Diagrams"},{"location":"southbridge/#references","text":"Southbridge / SoC diagram by IEEE Computer Society","title":"References"},{"location":"special-ntfs-usb-files/","text":"Special NTFS USB files What is this about ? Following special folders / files that can be created on a NTFS USB flash drive to trigger commands on console boot. List of files / folders Path Type Information $Diagnosis Folder The command $DumpSystemOS will write SystemOS-full.dmpx here. $NoSurface Folder Mount drive in HostOS instead of SystemOS. $DumpSystemOS Folder SystemOS Memory Dump. The console will ding when the dump is finished. (Host will delete $DumpSystemOS and dump SystemOS's memory into the $Diagnosis.) $DumpHostOS Folder HostOS Memory Dump $Diagnosis\\debug.bin File Set debug settings from debug.bin $SystemUpdate\\consoles.txt File Put an empty file consoles.txt on the flashdrive. Console will write its current systemupdate build version to the file on boot. $ConsoleRegion0 File Only available on Chinese Xbox One. Put an empty file $ConsoleRegion0 on the flashdrive to Disable region lock. $ConsoleRegion1 File Only available on Chinese Xbox One. Put an empty file $ConsoleRegion1 on the flashdrive to Enable region lock. MSXB_Kiosk File Put a special Kiosk XVD on the flashdrive, after booting the console will be locked in Kiosk mode. To exit, power off console and remove the flash drive. Note: + The SystemOS-full.dmpx file is encrypted and requires a retail key to decrypt. + Using $ConsoleRegion0 & $ConsoleRegion1 will affect the ability to read Xbox China game discs, but won't affect already installed digital games. + Non-Chinese Xbox One units cannot be region locked and read Xbox China discs / access China region Xbox Live by $ConsoleRegion1 .","title":"Special ntfs usb files"},{"location":"special-ntfs-usb-files/#special-ntfs-usb-files","text":"","title":"Special NTFS USB files"},{"location":"special-ntfs-usb-files/#what-is-this-about","text":"Following special folders / files that can be created on a NTFS USB flash drive to trigger commands on console boot.","title":"What is this about ?"},{"location":"special-ntfs-usb-files/#list-of-files-folders","text":"Path Type Information $Diagnosis Folder The command $DumpSystemOS will write SystemOS-full.dmpx here. $NoSurface Folder Mount drive in HostOS instead of SystemOS. $DumpSystemOS Folder SystemOS Memory Dump. The console will ding when the dump is finished. (Host will delete $DumpSystemOS and dump SystemOS's memory into the $Diagnosis.) $DumpHostOS Folder HostOS Memory Dump $Diagnosis\\debug.bin File Set debug settings from debug.bin $SystemUpdate\\consoles.txt File Put an empty file consoles.txt on the flashdrive. Console will write its current systemupdate build version to the file on boot. $ConsoleRegion0 File Only available on Chinese Xbox One. Put an empty file $ConsoleRegion0 on the flashdrive to Disable region lock. $ConsoleRegion1 File Only available on Chinese Xbox One. Put an empty file $ConsoleRegion1 on the flashdrive to Enable region lock. MSXB_Kiosk File Put a special Kiosk XVD on the flashdrive, after booting the console will be locked in Kiosk mode. To exit, power off console and remove the flash drive. Note: + The SystemOS-full.dmpx file is encrypted and requires a retail key to decrypt. + Using $ConsoleRegion0 & $ConsoleRegion1 will affect the ability to read Xbox China game discs, but won't affect already installed digital games. + Non-Chinese Xbox One units cannot be region locked and read Xbox China discs / access China region Xbox Live by $ConsoleRegion1 .","title":"List of files / folders"},{"location":"telemetry/","text":"Telemetry Just like on regular Windows 10, the Xbox One collects telemetry data too. Most telemetry is collected when you activate \"Extended usage data\", for example when subscribed to the Insider program . Deactive telemetry in Dev Mode The following commands should disable most telemetry service. Unfortunately it needs to be executed on every bootup. sc stop xbblackbox sc stop etwuploaderservice sc stop xbdiagservice sc stop diagtrack","title":"Telemetry"},{"location":"telemetry/#telemetry","text":"Just like on regular Windows 10, the Xbox One collects telemetry data too. Most telemetry is collected when you activate \"Extended usage data\", for example when subscribed to the Insider program .","title":"Telemetry"},{"location":"telemetry/#deactive-telemetry-in-dev-mode","text":"The following commands should disable most telemetry service. Unfortunately it needs to be executed on every bootup. sc stop xbblackbox sc stop etwuploaderservice sc stop xbdiagservice sc stop diagtrack","title":"Deactive telemetry in Dev Mode"},{"location":"update-cfg/","text":"Update.cfg File format CONTAINER_INDEX_FILE Structure of container.index file. Offset Length Type Information 0x00 0x04 uint32 Type 0x08 0x04 uint32 FileCount 0x0C 0x04 uint32 NameLength 0x10 var WCHAR[NameLength] Name var 0x04 uint32 AumIdLength var var WCHAR[AumIdLength] AumId var 0x08 FILETIME Timestamp var 0x04 uint32 Unknown (seen 0, 1, 3 so far) var 0x04 uint32 IdLength var var WCHAR[IdLength] Id var 0x04 uint32 AumIdLength CONTAINER_INDEX_ENTRY Offset Length Type Information 0x00 0x04 uint32 FilenameLength 0x04 var WCHAR[FilenameLength] Filename var 0x04 uint32 FilenameAltLength var var WCHAR[FilenameAltLength] FilenameAlt var 0x04 uint32 AumIdLength var var WCHAR[AumIdLength] AumId var 0x08 FILETIME Timestamp var 0x04 uint32 Unknown (seen 0, 1, 3 so far) var 0x04 uint32 IdLength var var WCHAR[IdLength] Id var 0x04 uint32 AumIdLength","title":"Update.cfg"},{"location":"update-cfg/#updatecfg","text":"","title":"Update.cfg"},{"location":"update-cfg/#file-format","text":"","title":"File format"},{"location":"update-cfg/#container_index_file","text":"Structure of container.index file. Offset Length Type Information 0x00 0x04 uint32 Type 0x08 0x04 uint32 FileCount 0x0C 0x04 uint32 NameLength 0x10 var WCHAR[NameLength] Name var 0x04 uint32 AumIdLength var var WCHAR[AumIdLength] AumId var 0x08 FILETIME Timestamp var 0x04 uint32 Unknown (seen 0, 1, 3 so far) var 0x04 uint32 IdLength var var WCHAR[IdLength] Id var 0x04 uint32 AumIdLength","title":"CONTAINER_INDEX_FILE"},{"location":"update-cfg/#container_index_entry","text":"Offset Length Type Information 0x00 0x04 uint32 FilenameLength 0x04 var WCHAR[FilenameLength] Filename var 0x04 uint32 FilenameAltLength var var WCHAR[FilenameAltLength] FilenameAlt var 0x04 uint32 AumIdLength var var WCHAR[AumIdLength] AumId var 0x08 FILETIME Timestamp var 0x04 uint32 Unknown (seen 0, 1, 3 so far) var 0x04 uint32 IdLength var var WCHAR[IdLength] Id var 0x04 uint32 AumIdLength","title":"CONTAINER_INDEX_ENTRY"},{"location":"vbi/","text":"VBI - Virtual Boot Image There are VBI files for each OS layer: HostOS, SystemOS, EraOS. Virtual boot images act as a kind of preloader to the respective XVD. File format Total Size: variable Offset Length Type Information 0x00 0x02 ushort Magic (1IBV) 0x02 N/A N/A N/A","title":"VBI - Virtual Boot Image"},{"location":"vbi/#vbi-virtual-boot-image","text":"There are VBI files for each OS layer: HostOS, SystemOS, EraOS. Virtual boot images act as a kind of preloader to the respective XVD.","title":"VBI - Virtual Boot Image"},{"location":"vbi/#file-format","text":"Total Size: variable Offset Length Type Information 0x00 0x02 ushort Magic (1IBV) 0x02 N/A N/A N/A","title":"File format"},{"location":"vulnerability-template-page/","text":"Name / description of vulnerability Metadata Release date 30.12.2020 Author Author name Classification Type of access Patched yes/no Patch date 12.11.2020 First patched system version 10.0.15063.2022 (RS2_RELEASE_XBOX_1704.170501-1052) Source https://github.com/link/to/source Download [Download](files/exploit_binary.zip) Info Describe the exploit Prerequisites Describe which software / state is needed to use this exploit Instructions How to execute the exploit?","title":"Name / description of vulnerability"},{"location":"vulnerability-template-page/#name-description-of-vulnerability","text":"","title":"Name / description of vulnerability"},{"location":"vulnerability-template-page/#metadata","text":"Release date 30.12.2020 Author Author name Classification Type of access Patched yes/no Patch date 12.11.2020 First patched system version 10.0.15063.2022 (RS2_RELEASE_XBOX_1704.170501-1052) Source https://github.com/link/to/source Download [Download](files/exploit_binary.zip)","title":"Metadata"},{"location":"vulnerability-template-page/#info","text":"Describe the exploit","title":"Info"},{"location":"vulnerability-template-page/#prerequisites","text":"Describe which software / state is needed to use this exploit","title":"Prerequisites"},{"location":"vulnerability-template-page/#instructions","text":"How to execute the exploit?","title":"Instructions"},{"location":"wifi/","text":"Wifi Chipsets Xbox One First revision of the Xbox One has both chipsets on the same PCB, a 8-pin connection goes from the PCB to the motherboard. - Marvell Avastar 88W8897 - Marvell Avastar 88W8782U Xbox One S MediaTek MT7612UN Xbox One X Unknown Pictures Xbox One (PHAT) Xbox One S Xbox One X (SCORPIO) Security considerations On the conference ZeroNights 2018 several vulnerabilities in the Marvell Avastar Wifi chip family (88W8787, 88W8797, 88W8801, 88W8897, and 88W8997) were presented. Click here for more info: Link Credits Pictures from ifixit.com","title":"Wifi"},{"location":"wifi/#wifi","text":"","title":"Wifi"},{"location":"wifi/#chipsets","text":"","title":"Chipsets"},{"location":"wifi/#xbox-one","text":"First revision of the Xbox One has both chipsets on the same PCB, a 8-pin connection goes from the PCB to the motherboard. - Marvell Avastar 88W8897 - Marvell Avastar 88W8782U","title":"Xbox One"},{"location":"wifi/#xbox-one-s","text":"MediaTek MT7612UN","title":"Xbox One S"},{"location":"wifi/#xbox-one-x","text":"Unknown","title":"Xbox One X"},{"location":"wifi/#pictures","text":"Xbox One (PHAT) Xbox One S Xbox One X (SCORPIO)","title":"Pictures"},{"location":"wifi/#security-considerations","text":"On the conference ZeroNights 2018 several vulnerabilities in the Marvell Avastar Wifi chip family (88W8787, 88W8797, 88W8801, 88W8897, and 88W8997) were presented. Click here for more info: Link","title":"Security considerations"},{"location":"wifi/#credits","text":"Pictures from ifixit.com","title":"Credits"},{"location":"winmd/","text":"Xbox One Windows Runtime An overview and guide to the WinRT used on the Xbox One and how to use these in your universal windows applications. The Windows Runtime is an API based on COM that allows interfacing from multiple programming languages and can be instanced from other services that register class objects. These are usually stored in the '.winmd' format that defines the information for each object within. The Xbox One makes great use of both WinRT and COM but it primarily uses the WinRT for the inbox applications (e.g. Dashboard) while store apps are not able to use them officially. Using the Xbox Windows Runtime We can utilise the runtime for the Xbox One by directly referencing the Windows.Xbox.winmd that is located on the system boot drive (C:\\Windows\\System32\\WinMetadata) in our Windows Runtime Library (C++). This will allow you to wrap around functionality natively and expose it to your application if it is written in another language such as C#. You can also extract more explicit information for manual use in a command line project with the utilities in the Windows SDK. Extracting header and idl files Open the Developer Command Prompt and navigate to the dumped directory of the consoles \"C:\\Windows\\System32\\WinMetadata\" location. Run: winmidl /nologo /outdir:\"[Full path to extraction folder]\" [Full path to target file].winmd Run: midlrt \"[Path of extracted IDL file]\" /metadata_dir \"[Path to Xbox WinMetadata folder]\" Done! Once they are extracted, you could then include the generated files but the preferred approach is to redefine the interfaces in your project and do manual activation - you can see this done in XboxUnattend. Resources https://docs.microsoft.com/en-us/uwp/winrt-cref/winmd-files https://docs.microsoft.com/en-us/cpp/cppcx/wrl/use-winmdidl-and-midlrt-to-create-h-files-from-windows-metadata?view=vs-2019","title":"Winmd"},{"location":"winmd/#xbox-one-windows-runtime","text":"An overview and guide to the WinRT used on the Xbox One and how to use these in your universal windows applications. The Windows Runtime is an API based on COM that allows interfacing from multiple programming languages and can be instanced from other services that register class objects. These are usually stored in the '.winmd' format that defines the information for each object within. The Xbox One makes great use of both WinRT and COM but it primarily uses the WinRT for the inbox applications (e.g. Dashboard) while store apps are not able to use them officially.","title":"Xbox One Windows Runtime"},{"location":"winmd/#using-the-xbox-windows-runtime","text":"We can utilise the runtime for the Xbox One by directly referencing the Windows.Xbox.winmd that is located on the system boot drive (C:\\Windows\\System32\\WinMetadata) in our Windows Runtime Library (C++). This will allow you to wrap around functionality natively and expose it to your application if it is written in another language such as C#. You can also extract more explicit information for manual use in a command line project with the utilities in the Windows SDK.","title":"Using the Xbox Windows Runtime"},{"location":"winmd/#extracting-header-and-idl-files","text":"Open the Developer Command Prompt and navigate to the dumped directory of the consoles \"C:\\Windows\\System32\\WinMetadata\" location. Run: winmidl /nologo /outdir:\"[Full path to extraction folder]\" [Full path to target file].winmd Run: midlrt \"[Path of extracted IDL file]\" /metadata_dir \"[Path to Xbox WinMetadata folder]\" Done! Once they are extracted, you could then include the generated files but the preferred approach is to redefine the interfaces in your project and do manual activation - you can see this done in XboxUnattend.","title":"Extracting header and idl files"},{"location":"winmd/#resources","text":"https://docs.microsoft.com/en-us/uwp/winrt-cref/winmd-files https://docs.microsoft.com/en-us/cpp/cppcx/wrl/use-winmdidl-and-midlrt-to-create-h-files-from-windows-metadata?view=vs-2019","title":"Resources"},{"location":"xbox-boot-file-system/","text":"Xbox Boot file system Xbox Boot File System, or XBFS for short, refers to the console flash filesystem. XBFS Header offsets The Flash can contain 3 different revisions of filetables, differentiated via its sequence number. Highest sequence number is the active one. Checking if a filetable exists is done by checking for XBFS_HEADER->Magic. Absolute offsets: 0x10000 0x810000 0x820000 Checking for file existance Iterate through the array of XBFS_FILE_ENTRY and check if XBFS_FILE_ENTRY.Size > 0. XBFS Structures Byteorder: Little endian FILE_COUNT: variable PAGE_SIZE: 0x1000 XBFS_HEADER Size: 0x400 Offset Length Type Information 0x00 0x04 uint Magic (SFBX) 0x04 0x01 byte Format Version 0x05 0x01 byte Sequence Version* 0x06 0x02 ushort Layout Version 0x08 0x08 uint64 Unknown 0x10 0x08 uint64 Unknown 0x18 0x08 uint64 Unknown 0x20 FILE_COUNT * sizeof(XBFS_FILE_ENTRY) struct XBFS_FILE_ENTRY File Entries 0x3D0 0x10 byte[] UUID 0x3E0 0x20 byte[] SHA256 Hash Sequence number: Wraps around, aka 0xFF -> 0x00. 0x00 would be latest. XBFS_FILE_ENTRY Size: 0x10 Offset Length Type Information 0x00 0x04 uint32 Offset (page count) 0x04 0x04 uint32 Size (page count) 0x08 0x08 uint64 Unknown File Entries Index Name Format Plaintext Information Per console 01 1smcbl_a.bin binary no SMC bootloader, slot A no 02 header.bin binary yes XBFS header no 03 devkit.ini binary no devkit ini unknown 04 mtedata.cfg binary no MTE data unknown 05 certkeys.bin binary yes Keyblobs & console certificate yes 06 smcerr.log binary no SMC error log no 07 system.xvd xvd yes SystemOS VM partition no 08 $sosrst.xvd xvd yes SystemOS restore no 09 download.xvd xvd yes Download ??? no 10 smc_s.cfg binary no SMC config - static unknown 11 sp_s.cfg binary partially SP config - static yes 12 os_s.cfg binary no OS config - static unknown 13 smc_d.cfg binary no SMC config - dynamic unknown 14 sp_d.cfg binary no SP config - dynamic unknown 15 os_d.cfg binary no OS config - dynamic unknown 16 smcfw.bin binary no SMC firmware unknown 17 boot.bin binary no Bootloaders unknown 18 host.xvd xvd yes HostOS partition no 19 settings.xvd xvd yes Settings no 20 1smcbl_b.bin binary no SMC bootloader, slot B no 21 bootanim.dat binary yes Bootanimation no 22 sostmpl.xvd xvd yes SystemOS template no 23 update.cfg binary yes Update config / log? unknown 24 sosinit.xvd xvd yes SystemOS init no 25 hwinit.cfg binary no Hardware init config unknown Note: Only XVD header is plaintext, data portion is encrypted as usual. Per Console: Is file encrypted via console specific keys or locked to console by SocId. Access via SRA/SystemOS Access to the Flash from SystemOS is possible via the provided pipes: \\\\.\\Xvuc\\FlashFs\\ - Connects to the Flash's NTFS filter driver on host, providing a NTFS like environment compatible with most Win32 file APIs. Reading specific files is possible by simply appending them to the pipe path. Ex: \\\\.\\Xvuc\\FlashFs\\sp_s.cfg would give you a file handle to sp_s.cfg. \\\\.\\Xvuc\\Flash\\ - Unlike the filtered pipe above, this pipe provides direct access to the flash, without any kind of file system filter. Refer above for more information.","title":"Xbox boot file system"},{"location":"xbox-boot-file-system/#xbox-boot-file-system","text":"Xbox Boot File System, or XBFS for short, refers to the console flash filesystem.","title":"Xbox Boot file system"},{"location":"xbox-boot-file-system/#xbfs-header-offsets","text":"The Flash can contain 3 different revisions of filetables, differentiated via its sequence number. Highest sequence number is the active one. Checking if a filetable exists is done by checking for XBFS_HEADER->Magic. Absolute offsets: 0x10000 0x810000 0x820000","title":"XBFS Header offsets"},{"location":"xbox-boot-file-system/#checking-for-file-existance","text":"Iterate through the array of XBFS_FILE_ENTRY and check if XBFS_FILE_ENTRY.Size > 0.","title":"Checking for file existance"},{"location":"xbox-boot-file-system/#xbfs-structures","text":"Byteorder: Little endian FILE_COUNT: variable PAGE_SIZE: 0x1000","title":"XBFS Structures"},{"location":"xbox-boot-file-system/#xbfs_header","text":"Size: 0x400 Offset Length Type Information 0x00 0x04 uint Magic (SFBX) 0x04 0x01 byte Format Version 0x05 0x01 byte Sequence Version* 0x06 0x02 ushort Layout Version 0x08 0x08 uint64 Unknown 0x10 0x08 uint64 Unknown 0x18 0x08 uint64 Unknown 0x20 FILE_COUNT * sizeof(XBFS_FILE_ENTRY) struct XBFS_FILE_ENTRY File Entries 0x3D0 0x10 byte[] UUID 0x3E0 0x20 byte[] SHA256 Hash Sequence number: Wraps around, aka 0xFF -> 0x00. 0x00 would be latest.","title":"XBFS_HEADER"},{"location":"xbox-boot-file-system/#xbfs_file_entry","text":"Size: 0x10 Offset Length Type Information 0x00 0x04 uint32 Offset (page count) 0x04 0x04 uint32 Size (page count) 0x08 0x08 uint64 Unknown","title":"XBFS_FILE_ENTRY"},{"location":"xbox-boot-file-system/#file-entries","text":"Index Name Format Plaintext Information Per console 01 1smcbl_a.bin binary no SMC bootloader, slot A no 02 header.bin binary yes XBFS header no 03 devkit.ini binary no devkit ini unknown 04 mtedata.cfg binary no MTE data unknown 05 certkeys.bin binary yes Keyblobs & console certificate yes 06 smcerr.log binary no SMC error log no 07 system.xvd xvd yes SystemOS VM partition no 08 $sosrst.xvd xvd yes SystemOS restore no 09 download.xvd xvd yes Download ??? no 10 smc_s.cfg binary no SMC config - static unknown 11 sp_s.cfg binary partially SP config - static yes 12 os_s.cfg binary no OS config - static unknown 13 smc_d.cfg binary no SMC config - dynamic unknown 14 sp_d.cfg binary no SP config - dynamic unknown 15 os_d.cfg binary no OS config - dynamic unknown 16 smcfw.bin binary no SMC firmware unknown 17 boot.bin binary no Bootloaders unknown 18 host.xvd xvd yes HostOS partition no 19 settings.xvd xvd yes Settings no 20 1smcbl_b.bin binary no SMC bootloader, slot B no 21 bootanim.dat binary yes Bootanimation no 22 sostmpl.xvd xvd yes SystemOS template no 23 update.cfg binary yes Update config / log? unknown 24 sosinit.xvd xvd yes SystemOS init no 25 hwinit.cfg binary no Hardware init config unknown Note: Only XVD header is plaintext, data portion is encrypted as usual. Per Console: Is file encrypted via console specific keys or locked to console by SocId.","title":"File Entries"},{"location":"xbox-boot-file-system/#access-via-srasystemos","text":"Access to the Flash from SystemOS is possible via the provided pipes: \\\\.\\Xvuc\\FlashFs\\ - Connects to the Flash's NTFS filter driver on host, providing a NTFS like environment compatible with most Win32 file APIs. Reading specific files is possible by simply appending them to the pipe path. Ex: \\\\.\\Xvuc\\FlashFs\\sp_s.cfg would give you a file handle to sp_s.cfg. \\\\.\\Xvuc\\Flash\\ - Unlike the filtered pipe above, this pipe provides direct access to the flash, without any kind of file system filter. Refer above for more information.","title":"Access via SRA/SystemOS"},{"location":"xbox-game-disc/","text":"Xbox One Game Disc History The term *XGD exists since the classic Xbox. XGD1 - Original classic Xbox XGD2/XGD3 - Xbox 360 XGD4 - Xbox One File structure XGD4_DISC \u251c\u2500\u2500 Licenses \u2502 \u2514\u2500\u2500 License0.xml \u2514\u2500\u2500 MSXC \u251c\u2500\u2500 Metadata \u2502 \u251c\u2500\u2500 Package0.xvc \u2502 \u2502 \u251c\u2500\u2500 100x100_1.png \u2502 \u2502 \u251c\u2500\u2500 208x208_1.png \u2502 \u2502 \u2514\u2500\u2500 480x480_1.png \u2502 \u251c\u2500\u2500 catalog.js \u2502 \u2514\u2500\u2500 catalog.sig \u2514\u2500\u2500 PackageName_1.0.0.0_x64__PublisherId License0.xml <?xml version=\"1.0\"?> <LicenseRequestResponse xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ErrorCode=\"0\" ErrorText=\"OK\" xmlns=\"http://schemas.microsoft.com/xboxlive/security/clas/LicResp/v1\"> <License LicenseProtocolVersion=\"4\"> <SignedLicense>PD94bWwgdmVyc2lvbj0iMS4wIj8+DQo8U2lnbmVkTGljZW5zZSB4bWxuczp4c2Q9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiBMaWNlbnNlUHJvdG9jb2xWZXJzaW9uPSI0IiB4bWxucz0iaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS94Ym94bGl2ZS9zZWN1cml0eS9jbGFzL0xpY1Jlc3AvdjEiPg0KICA8U1ZMaWNlbnNlIExpY2Vuc2VJZD0iZWQwNjU0OWItNTcyNy00MDQ3LTg2NTctMDM5OTRkYWYyNWJiIiBMaWNlbnNlVHlwZT0iR2FtZUNvbnRlbnQiIFBlcnNpc3Q9ImZhbHNlIiBMaWNlbnNlVXNhZ2U9IkRpc2NPZmZsaW5lIj4NCiAgICA8RGlzY0lEPjViZDQ3MzU1LWQ2YTEtZmM4My1hMzVkLTFmZjdjMjM4Yzk1NDwvRGlzY0lEPg0KICAgIDxCb290TW9kZT5SZXRhaWw8L0Jvb3RNb2RlPg0KICAgIDxLZXlJZD4xNzkyZTIxMy0zMTdmLTRhNTktODFiNi01MjFlZjk0MmU3Nzg8L0tleUlkPg0KICAgIDxVcGxpbmtLZXlJZD4wMDAwMDAwNC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDA8L1VwbGlua0tleUlkPg0KICAgIDxBYnNvbHV0ZUlzc3VlRGF0ZT4yMDE2LTA1LTExVDIwOjIyOjMyLjc3MDU0MThaPC9BYnNvbHV0ZUlzc3VlRGF0ZT4NCiAgPC9TVkxpY2Vuc2U+DQogIDxTUExpY2Vuc2VCbG9jaz5vNVNzYllaRkprZXlSWWRISTQzbDJJSTZrVUVOMmlFcG5nWnl6SUpJYmh1Yk1zZHB6N1Z0R1hLeTNCd2VWOVZzWTFnZFNZR01jU3RiQm1sRXpWdzhsaFozL2NZWVAzWmlBOCtHdXJ4bHJiUjFVRzJYSmZYcG5IamFxUXFEODdMcmtSNE9Oa3REUG5ldzdQUXB0by9sY2FUNThrY0lFVHcyUGo5blRhalMrMzFldHBSMUVDNmxOTnV2RkZudnpmQjRNVDVjengvUU5TUmZwc05pR1hnZzQvaytWTVRnRUN3RkQ2NTk0bmR1SmdhdG9Felg4RzF0a1RLRFBFQ0RlUmUzU3Jpbnlydm9Yd0UxeEhLWkhCQksrckZibXVhQXMySFVxazdLQ1FsaENOeUYweTU1dkdwcTVSSndDekw1WTVUdEJOcWFsN0JhSzZoalRPZjNqTGIrY0tBQ09rTGlqNlBDdnkvT0dZM2JJZlJoYWduQmQ4ZVYybUp5T3VXVzlnUEJvdlc0Z0FyMHVuNXZqSS9zWU02YkdZZDRQcWxmVXdHTjkyZWF1OW5NUHFHY3k2R28zakJWSGtZWm50MUJxZkZQZFV5d0I5bHJOOWtUYjJRSzNtejliVThPTFk5WWY1MlhFaFpHZlY0Zis1V0NMTWk2YmczOTFibDlRd0lwbklua0NZTzIxTW5WV2lMZTl5Vk5qZ283ZERDci9UVzFsYlVWcEdSZm9sS3JKdFZwOGUwazFIZmdSWEZ1L1lYeGJ6bVQzZGtNejlBekJvMWI3L0lhTWN0MnJpaUU1RWp0SmVKR1liVWtnNksvbkExWTMyb3hXSWNicHBJN3hTQkNnNVBickFYVWgxcEZTVDhrTjBSKzBYNWs4c09ZZVViYlZnaHhVSkhIaElJellDaz08L1NQTGljZW5zZUJsb2NrPg0KPC9TaWduZWRMaWNlbnNlPg==</SignedLicense> <Signature DigestAlgorithm=\"SHA256\" SignaturePadding=\"PKCS1\"> <SigningKeyHash>zvU0Hg2vUPFIoE8slLWWS8Zg1S6lTYePmMtmIR9sZx8=</SigningKeyHash> <SignatureValue>wiAHWvMYA5FViDqkW1GlgNJijEYaaqK7ZZjezYHsrkvSUNGxfpUqTYlLeuzLOVv/uSHlgf4QIJrKm0T131OW0J5DODsNkCGGjgGmcbnE0pguhP1jkcJ0HkMxAARDToX3JcMw52Yv5eq+Cddmgg49hDjN2eavQL5E4JDC0We5NWDapO5HTYZ3mwazXgE+4oCMUHHtP8pgQ02FT0Zn0Gh3ftR0kF1S0WpL/bF9upsL5Q/o4qc4nwNjxiTfV6/TZ4ymEGKUEOwOy8rgPMjRJnsfWCYYaW0UeOLzEsS9DFkRM7bzt6+QQbPEMxOUb0HJglaxRvpud5RNcNGSRqa7CTgLOQ==</SignatureValue> </Signature> </License> </LicenseRequestResponse> Note: All keys have been replaced by bogus data catalog.js { \"version\":\"2.0\", \"launchPackage\":{ \"contentId\":\"043f2c37-d43b-4675-9005-89e5bddcb83f\" }, \"packages\":[ { \"packageName\":\"Package0.xvc\", \"productId\":\"11070feb-205e-41de-aef2-3475e433c3fe\", \"contentId\":\"043f2c37-d43b-4675-9005-89e5bddcb83f\", \"titleId\":\"1D09BE4D\", \"titles\":[ { \"locale\":\"default\", \"title\":\"Prison Architect: Xbox One Edition\" } ], \"vui\":[ { \"locale\":\"default\", \"title\":\"Prison Architect: Xbox One Edition\" } ], \"images\":[ { \"size\":\"100x100\", \"image\":\"100x100_1.png\" }, { \"size\":\"208x208\", \"image\":\"208x208_1.png\" }, { \"size\":\"480x480\", \"image\":\"480x480_1.png\" } ], \"ratings\":[ { \"system\":\"CERO\", \"value\":\"Unrated\" }, { \"system\":\"CSRR\", \"value\":\"PG15\" }, { \"system\":\"GRB\", \"value\":\"Unrated\" }, { \"system\":\"PEGI\", \"value\":\"16\" }, { \"system\":\"DJCTQ\", \"value\":\"16\" }, { \"system\":\"PEGIPortugal\", \"value\":\"16\" }, { \"system\":\"USK\", \"value\":\"12\" }, { \"system\":\"China\", \"value\":\"3+\" }, { \"system\":\"OFLC\", \"value\":\"M\" }, { \"system\":\"COB\", \"value\":\"M\" }, { \"system\":\"PCBP\", \"value\":\"16+\" }, { \"system\":\"ESRB\", \"value\":\"M\" } ], \"size\":364699648, \"type\":\"Game\" } ] } License The data of SignedLicense in License0.xml decodes to something like this: <?xml version=\"1.0\"?> <SignedLicense xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" LicenseProtocolVersion=\"4\" xmlns=\"http://schemas.microsoft.com/xboxlive/security/clas/LicResp/v1\"> <SVLicense LicenseId=\"ed06549b-5727-4047-8657-03994daf25bb\" LicenseType=\"GameContent\" Persist=\"false\" LicenseUsage=\"DiscOffline\"> <DiscID>5bd47355-d6a1-fc83-a35d-1ff7c238c954</DiscID> <BootMode>Retail</BootMode> <KeyId>1792e213-317f-4a59-81b6-521ef942e778</KeyId> <UplinkKeyId>00000004-0000-0000-0000-000000000000</UplinkKeyId> <AbsoluteIssueDate>2016-05-11T20:22:32.7705418Z</AbsoluteIssueDate> </SVLicense> <SPLicenseBlock>o5SsbYZFJkeyRYdHI43l2II6kUEN2iEpngZyzIJIbhubMsdpz7VtGXKy3BweV9VsY1gdSYGMcStbBmlEzVw8lhZ3/cYYP3ZiA8+GurxlrbR1UG2XJfXpnHjaqQqD87LrkR4ONktDPnew7PQpto/lcaT58kcIETw2Pj9nTajS+31etpR1EC6lNNuvFFnvzfB4MT5czx/QNSRfpsNiGXgg4/k+VMTgECwFD6594nduJgatoEzX8G1tkTKDPECDeRe3SrinyrvoXwE1xHKZHBBK+rFbmuaAs2HUqk7KCQlhCNyF0y55vGpq5RJwCzL5Y5TtBNqal7BaK6hjTOf3jLb+cKACOkLij6PCvy/OGY3bIfRhagnBd8eV2mJyOuWW9gPBovW4gAr0un5vjI/sYM6bGYd4PqlfUwGN92eau9nMPqGcy6Go3jBVHkYZnt1BqfFPdUywB9lrN9kTb2QK3mz9bU8OLY9Yf52XEhZGfV4f+5WCLMi6bg391bl9QwIpnInkCYO21MnVWiLe9yVNjgo7dDCr/TW1lbUVpGRfolKrJtVp8e0k1HfgRXFu/YXxbzmT3dkMz9AzBo1b7/IaMct2riiE5EjtJeJGYbUkg6K/nA1Y32oxWIcbppI7xSBCg5PbrAXUh1pFST8kN0R+0X5k8sOYeUbbVghxUJHHhIIzYCk=</SPLicenseBlock> </SignedLicense> Note: All keys have been replaced by bogus data References Xbox Game Disc on xboxdevwiki","title":"Xbox One Game Disc"},{"location":"xbox-game-disc/#xbox-one-game-disc","text":"","title":"Xbox One Game Disc"},{"location":"xbox-game-disc/#history","text":"The term *XGD exists since the classic Xbox. XGD1 - Original classic Xbox XGD2/XGD3 - Xbox 360 XGD4 - Xbox One","title":"History"},{"location":"xbox-game-disc/#file-structure","text":"XGD4_DISC \u251c\u2500\u2500 Licenses \u2502 \u2514\u2500\u2500 License0.xml \u2514\u2500\u2500 MSXC \u251c\u2500\u2500 Metadata \u2502 \u251c\u2500\u2500 Package0.xvc \u2502 \u2502 \u251c\u2500\u2500 100x100_1.png \u2502 \u2502 \u251c\u2500\u2500 208x208_1.png \u2502 \u2502 \u2514\u2500\u2500 480x480_1.png \u2502 \u251c\u2500\u2500 catalog.js \u2502 \u2514\u2500\u2500 catalog.sig \u2514\u2500\u2500 PackageName_1.0.0.0_x64__PublisherId","title":"File structure"},{"location":"xbox-game-disc/#license0xml","text":"<?xml version=\"1.0\"?> <LicenseRequestResponse xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ErrorCode=\"0\" ErrorText=\"OK\" xmlns=\"http://schemas.microsoft.com/xboxlive/security/clas/LicResp/v1\"> <License LicenseProtocolVersion=\"4\"> <SignedLicense>PD94bWwgdmVyc2lvbj0iMS4wIj8+DQo8U2lnbmVkTGljZW5zZSB4bWxuczp4c2Q9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiBMaWNlbnNlUHJvdG9jb2xWZXJzaW9uPSI0IiB4bWxucz0iaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS94Ym94bGl2ZS9zZWN1cml0eS9jbGFzL0xpY1Jlc3AvdjEiPg0KICA8U1ZMaWNlbnNlIExpY2Vuc2VJZD0iZWQwNjU0OWItNTcyNy00MDQ3LTg2NTctMDM5OTRkYWYyNWJiIiBMaWNlbnNlVHlwZT0iR2FtZUNvbnRlbnQiIFBlcnNpc3Q9ImZhbHNlIiBMaWNlbnNlVXNhZ2U9IkRpc2NPZmZsaW5lIj4NCiAgICA8RGlzY0lEPjViZDQ3MzU1LWQ2YTEtZmM4My1hMzVkLTFmZjdjMjM4Yzk1NDwvRGlzY0lEPg0KICAgIDxCb290TW9kZT5SZXRhaWw8L0Jvb3RNb2RlPg0KICAgIDxLZXlJZD4xNzkyZTIxMy0zMTdmLTRhNTktODFiNi01MjFlZjk0MmU3Nzg8L0tleUlkPg0KICAgIDxVcGxpbmtLZXlJZD4wMDAwMDAwNC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDA8L1VwbGlua0tleUlkPg0KICAgIDxBYnNvbHV0ZUlzc3VlRGF0ZT4yMDE2LTA1LTExVDIwOjIyOjMyLjc3MDU0MThaPC9BYnNvbHV0ZUlzc3VlRGF0ZT4NCiAgPC9TVkxpY2Vuc2U+DQogIDxTUExpY2Vuc2VCbG9jaz5vNVNzYllaRkprZXlSWWRISTQzbDJJSTZrVUVOMmlFcG5nWnl6SUpJYmh1Yk1zZHB6N1Z0R1hLeTNCd2VWOVZzWTFnZFNZR01jU3RiQm1sRXpWdzhsaFozL2NZWVAzWmlBOCtHdXJ4bHJiUjFVRzJYSmZYcG5IamFxUXFEODdMcmtSNE9Oa3REUG5ldzdQUXB0by9sY2FUNThrY0lFVHcyUGo5blRhalMrMzFldHBSMUVDNmxOTnV2RkZudnpmQjRNVDVjengvUU5TUmZwc05pR1hnZzQvaytWTVRnRUN3RkQ2NTk0bmR1SmdhdG9Felg4RzF0a1RLRFBFQ0RlUmUzU3Jpbnlydm9Yd0UxeEhLWkhCQksrckZibXVhQXMySFVxazdLQ1FsaENOeUYweTU1dkdwcTVSSndDekw1WTVUdEJOcWFsN0JhSzZoalRPZjNqTGIrY0tBQ09rTGlqNlBDdnkvT0dZM2JJZlJoYWduQmQ4ZVYybUp5T3VXVzlnUEJvdlc0Z0FyMHVuNXZqSS9zWU02YkdZZDRQcWxmVXdHTjkyZWF1OW5NUHFHY3k2R28zakJWSGtZWm50MUJxZkZQZFV5d0I5bHJOOWtUYjJRSzNtejliVThPTFk5WWY1MlhFaFpHZlY0Zis1V0NMTWk2YmczOTFibDlRd0lwbklua0NZTzIxTW5WV2lMZTl5Vk5qZ283ZERDci9UVzFsYlVWcEdSZm9sS3JKdFZwOGUwazFIZmdSWEZ1L1lYeGJ6bVQzZGtNejlBekJvMWI3L0lhTWN0MnJpaUU1RWp0SmVKR1liVWtnNksvbkExWTMyb3hXSWNicHBJN3hTQkNnNVBickFYVWgxcEZTVDhrTjBSKzBYNWs4c09ZZVViYlZnaHhVSkhIaElJellDaz08L1NQTGljZW5zZUJsb2NrPg0KPC9TaWduZWRMaWNlbnNlPg==</SignedLicense> <Signature DigestAlgorithm=\"SHA256\" SignaturePadding=\"PKCS1\"> <SigningKeyHash>zvU0Hg2vUPFIoE8slLWWS8Zg1S6lTYePmMtmIR9sZx8=</SigningKeyHash> <SignatureValue>wiAHWvMYA5FViDqkW1GlgNJijEYaaqK7ZZjezYHsrkvSUNGxfpUqTYlLeuzLOVv/uSHlgf4QIJrKm0T131OW0J5DODsNkCGGjgGmcbnE0pguhP1jkcJ0HkMxAARDToX3JcMw52Yv5eq+Cddmgg49hDjN2eavQL5E4JDC0We5NWDapO5HTYZ3mwazXgE+4oCMUHHtP8pgQ02FT0Zn0Gh3ftR0kF1S0WpL/bF9upsL5Q/o4qc4nwNjxiTfV6/TZ4ymEGKUEOwOy8rgPMjRJnsfWCYYaW0UeOLzEsS9DFkRM7bzt6+QQbPEMxOUb0HJglaxRvpud5RNcNGSRqa7CTgLOQ==</SignatureValue> </Signature> </License> </LicenseRequestResponse> Note: All keys have been replaced by bogus data","title":"License0.xml"},{"location":"xbox-game-disc/#catalogjs","text":"{ \"version\":\"2.0\", \"launchPackage\":{ \"contentId\":\"043f2c37-d43b-4675-9005-89e5bddcb83f\" }, \"packages\":[ { \"packageName\":\"Package0.xvc\", \"productId\":\"11070feb-205e-41de-aef2-3475e433c3fe\", \"contentId\":\"043f2c37-d43b-4675-9005-89e5bddcb83f\", \"titleId\":\"1D09BE4D\", \"titles\":[ { \"locale\":\"default\", \"title\":\"Prison Architect: Xbox One Edition\" } ], \"vui\":[ { \"locale\":\"default\", \"title\":\"Prison Architect: Xbox One Edition\" } ], \"images\":[ { \"size\":\"100x100\", \"image\":\"100x100_1.png\" }, { \"size\":\"208x208\", \"image\":\"208x208_1.png\" }, { \"size\":\"480x480\", \"image\":\"480x480_1.png\" } ], \"ratings\":[ { \"system\":\"CERO\", \"value\":\"Unrated\" }, { \"system\":\"CSRR\", \"value\":\"PG15\" }, { \"system\":\"GRB\", \"value\":\"Unrated\" }, { \"system\":\"PEGI\", \"value\":\"16\" }, { \"system\":\"DJCTQ\", \"value\":\"16\" }, { \"system\":\"PEGIPortugal\", \"value\":\"16\" }, { \"system\":\"USK\", \"value\":\"12\" }, { \"system\":\"China\", \"value\":\"3+\" }, { \"system\":\"OFLC\", \"value\":\"M\" }, { \"system\":\"COB\", \"value\":\"M\" }, { \"system\":\"PCBP\", \"value\":\"16+\" }, { \"system\":\"ESRB\", \"value\":\"M\" } ], \"size\":364699648, \"type\":\"Game\" } ] }","title":"catalog.js"},{"location":"xbox-game-disc/#license","text":"The data of SignedLicense in License0.xml decodes to something like this: <?xml version=\"1.0\"?> <SignedLicense xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" LicenseProtocolVersion=\"4\" xmlns=\"http://schemas.microsoft.com/xboxlive/security/clas/LicResp/v1\"> <SVLicense LicenseId=\"ed06549b-5727-4047-8657-03994daf25bb\" LicenseType=\"GameContent\" Persist=\"false\" LicenseUsage=\"DiscOffline\"> <DiscID>5bd47355-d6a1-fc83-a35d-1ff7c238c954</DiscID> <BootMode>Retail</BootMode> <KeyId>1792e213-317f-4a59-81b6-521ef942e778</KeyId> <UplinkKeyId>00000004-0000-0000-0000-000000000000</UplinkKeyId> <AbsoluteIssueDate>2016-05-11T20:22:32.7705418Z</AbsoluteIssueDate> </SVLicense> <SPLicenseBlock>o5SsbYZFJkeyRYdHI43l2II6kUEN2iEpngZyzIJIbhubMsdpz7VtGXKy3BweV9VsY1gdSYGMcStbBmlEzVw8lhZ3/cYYP3ZiA8+GurxlrbR1UG2XJfXpnHjaqQqD87LrkR4ONktDPnew7PQpto/lcaT58kcIETw2Pj9nTajS+31etpR1EC6lNNuvFFnvzfB4MT5czx/QNSRfpsNiGXgg4/k+VMTgECwFD6594nduJgatoEzX8G1tkTKDPECDeRe3SrinyrvoXwE1xHKZHBBK+rFbmuaAs2HUqk7KCQlhCNyF0y55vGpq5RJwCzL5Y5TtBNqal7BaK6hjTOf3jLb+cKACOkLij6PCvy/OGY3bIfRhagnBd8eV2mJyOuWW9gPBovW4gAr0un5vjI/sYM6bGYd4PqlfUwGN92eau9nMPqGcy6Go3jBVHkYZnt1BqfFPdUywB9lrN9kTb2QK3mz9bU8OLY9Yf52XEhZGfV4f+5WCLMi6bg391bl9QwIpnInkCYO21MnVWiLe9yVNjgo7dDCr/TW1lbUVpGRfolKrJtVp8e0k1HfgRXFu/YXxbzmT3dkMz9AzBo1b7/IaMct2riiE5EjtJeJGYbUkg6K/nA1Y32oxWIcbppI7xSBCg5PbrAXUh1pFST8kN0R+0X5k8sOYeUbbVghxUJHHhIIzYCk=</SPLicenseBlock> </SignedLicense> Note: All keys have been replaced by bogus data","title":"License"},{"location":"xbox-game-disc/#references","text":"Xbox Game Disc on xboxdevwiki","title":"References"},{"location":"xbox-operating-system/","text":"Xbox Operating System Host The primary operating system known as the Host OS is responsible for managing the virtual machines, providing drivers for hardware components and more. It was based on a variation of Windows 8 LNM, a stripped down operating system for bare minimum requirements, with many customisations that implement Microsoft's Xbox Virtual Machine stack. Host Volumes/Drives Partition Mount Point Notes Internal Flash F:\\ The flash does not contain a normal file system, it is using the Xbox boot filesystem and is exposed as a normal NTFS partition via a special driver. host.xvd C:\\ Host's Windows Installation. User Content E:\\ Direct access to the HDD User Content partition. XVCs are stored here. System Update R:\\ Direct access to the HDD System Update partition. Boot slots and SystemOS XVDs. System Support G:\\(?) Direct access to the HDD System Support partition. Containing SystemOS's settings, temp, etc. System The System OS is built to provide the main visual and interactive layer of the console. This operating system is currently based on Windows 'OneCoreUAP' with a custom shell, services and other components. SRA Virtual Drives File Name Mount Point Dev-Only Read-Only Desc system.xvd C:\\ false true System Boot. systemaux.xvd X:\\ false true Inbox apps. systemauxf.xvd Y:\\ false true Inbox apps. $sosrst.xvd T:\\ false true Temporary storage. systemtools.xvd J:\\ true true Developer utilities. settings-saved.xvd S:\\ false false Console settings data. (Licenses, prefetch, registry and more) systemmisc.xvd M:\\ false true Miscellaneous system boot files. user.xvd U:\\ false false User and application data. user-devkit.xvd U:\\ true false User and application data. Game/Era The Game operating system is used exclusively for games that target the XDK due to the higher allocation of console resources. It is built upon the same variant of Windows 8 LNM as the Host OS but is essentially smaller and more efficient. ERA Virtual Drives File Name Mount Point Notes ERA.xvd C:\\ GameOS's Windows installation. Packaged with games via the XVC's user data. Attempts to read from this partition will result in the hypervisor terminating the ERA VM. Game.XVC G:\\ Running game's binaries/data. The XVC mounted and decrypted. ERATools.xvd J:\\ (MS Internal (and ERA Test?) Devkits with XDK recoveries only). Contains tools like ipconfig, telnetd, debug support dlls and dlls needed to connect to the XDK via the XB CLI tools. GameCore A new operating system that currently appears to be the new foundation for games developed on Windows 10 devices. Based on a 'headless' Windows Core OS (WCOS).","title":"Xbox operating system"},{"location":"xbox-operating-system/#xbox-operating-system","text":"","title":"Xbox Operating System"},{"location":"xbox-operating-system/#host","text":"The primary operating system known as the Host OS is responsible for managing the virtual machines, providing drivers for hardware components and more. It was based on a variation of Windows 8 LNM, a stripped down operating system for bare minimum requirements, with many customisations that implement Microsoft's Xbox Virtual Machine stack.","title":"Host"},{"location":"xbox-operating-system/#host-volumesdrives","text":"Partition Mount Point Notes Internal Flash F:\\ The flash does not contain a normal file system, it is using the Xbox boot filesystem and is exposed as a normal NTFS partition via a special driver. host.xvd C:\\ Host's Windows Installation. User Content E:\\ Direct access to the HDD User Content partition. XVCs are stored here. System Update R:\\ Direct access to the HDD System Update partition. Boot slots and SystemOS XVDs. System Support G:\\(?) Direct access to the HDD System Support partition. Containing SystemOS's settings, temp, etc.","title":"Host Volumes/Drives"},{"location":"xbox-operating-system/#system","text":"The System OS is built to provide the main visual and interactive layer of the console. This operating system is currently based on Windows 'OneCoreUAP' with a custom shell, services and other components.","title":"System"},{"location":"xbox-operating-system/#sra-virtual-drives","text":"File Name Mount Point Dev-Only Read-Only Desc system.xvd C:\\ false true System Boot. systemaux.xvd X:\\ false true Inbox apps. systemauxf.xvd Y:\\ false true Inbox apps. $sosrst.xvd T:\\ false true Temporary storage. systemtools.xvd J:\\ true true Developer utilities. settings-saved.xvd S:\\ false false Console settings data. (Licenses, prefetch, registry and more) systemmisc.xvd M:\\ false true Miscellaneous system boot files. user.xvd U:\\ false false User and application data. user-devkit.xvd U:\\ true false User and application data.","title":"SRA Virtual Drives"},{"location":"xbox-operating-system/#gameera","text":"The Game operating system is used exclusively for games that target the XDK due to the higher allocation of console resources. It is built upon the same variant of Windows 8 LNM as the Host OS but is essentially smaller and more efficient.","title":"Game/Era"},{"location":"xbox-operating-system/#era-virtual-drives","text":"File Name Mount Point Notes ERA.xvd C:\\ GameOS's Windows installation. Packaged with games via the XVC's user data. Attempts to read from this partition will result in the hypervisor terminating the ERA VM. Game.XVC G:\\ Running game's binaries/data. The XVC mounted and decrypted. ERATools.xvd J:\\ (MS Internal (and ERA Test?) Devkits with XDK recoveries only). Contains tools like ipconfig, telnetd, debug support dlls and dlls needed to connect to the XDK via the XB CLI tools.","title":"ERA Virtual Drives"},{"location":"xbox-operating-system/#gamecore","text":"A new operating system that currently appears to be the new foundation for games developed on Windows 10 devices. Based on a 'headless' Windows Core OS (WCOS).","title":"GameCore"},{"location":"xbox-ui/","text":"XboxUI General XboxUI is the rendering engine / framework that is used to display windows in SystemOS. The framework is located in system.xvd => C:\\Windows\\XboxUI. Components Win32 process rendering Unknown how to achieve...","title":"Xbox ui"},{"location":"xbox-ui/#xboxui","text":"","title":"XboxUI"},{"location":"xbox-ui/#general","text":"XboxUI is the rendering engine / framework that is used to display windows in SystemOS. The framework is located in system.xvd => C:\\Windows\\XboxUI.","title":"General"},{"location":"xbox-ui/#components","text":"","title":"Components"},{"location":"xbox-ui/#win32-process-rendering","text":"Unknown how to achieve...","title":"Win32 process rendering"},{"location":"xbox-virtual-drive/","text":"Xbox Virtual Drive What are XVDs? XVD packages are a secured file format used by the Xbox One to store data, similar to the Xbox 360's STFS packages. XVD files are usually used to store system images/data while XVCs (a slightly modified version of XVDs) are used to store game data. An XVD file consists of a header containing the hash of the top level hash table, certain metadata about the file (such as content ID, content type, the sandbox ID the package was created for, the product ID that the package belongs to, etc) and also a signature of the header itself which is stored at the beginning of the XVD file, from 0h to 200h. After the header there's space for an optional embedded XVD (which is usually the GameOS partition that the game inside the XVC is coded against). This embedded XVD is just a copy-paste of the XVD being embedded with no changes made to it. After the embedded XVD comes an (optional) area for the hash tree, the tree is a multilevel array of hashes, with the topmost levels containing the hashes of the blocks in the levels underneath it. At the lowest level of the tree hashes of the data blocks (the blocks following the hash tree) are made. The hashes in the hash tree are computed using SHA-256, with the result usually being resized to 18h bytes (but for data block hashes can be slightly modified depending on flags in the XVD header and the XVC region that the data being hashed is located). The full 256-bit hash of the top-most level is stored in the XVD header. Following the hash tree is another optional area reserved for user data (also known as Persistent Local Storage). This area is for games to store local-only data, although some system XVD packages seem to store data here too. Finally after the user data comes the actual XVD data. If the XVD file is an XVC the first 3 blocks are reserved for an XVC descriptor (which is never encrypted). This specifies the content ID, any encryption keys used, the chunks used to update packages (if the XVC is using chunk-based updates) and offsets/lengths/keyIDs of the different XVC regions in the file, along with other metadata. XVC regions can be encrypted with any of the keys specified in the XVC descriptor. The region-based encryption also includes the XVC region ID as part of the AES-XTS IV/counter (known as data unit number for AES-XTS). Then comes the actual filesystem data. This data is encrypted with the CIK (can either be the decrypted value of the encrypted CIK in the XVD header if it's an XVD, or the key corresponding to the XVC key GUID) The filesystem data is just a normal NTFS filesystem containing the files inside the package, other filesystems may be possible but NTFS is the only one observed so far. Security Overview From a security standpoint XVDs seem very secure: Each block of data is hashed, with the hash stored in the bottom-most hash tree level Each block in that hash tree level is then hashed with the hash result stored in the level above it This continues, until eventually the number of hashes in the level can fit into one hash block That hash block is then hashed with the result stored in the XVD header The XVD header is then hashed, and the hash signed with Microsoft's private key, the signature is then stored at the beginning of the file. To make sure the package is authenticated by Microsoft and not tampered with the console just needs to verify the signature of the header-hash, verify the top-most hash tree hash and then verify that each hash in the hash tree matches up with the actual hash. This is similar to the way STFS packages were secured on the Xbox 360, however instead of having the hash tables scattered around the file (as with STFS) they're instead stored before the data actually begins. The data blocks inside XVD files are also secured with AES-XTS encryption (the encrypted data is then used for the hashes), with XVC packages the Xbox One either retrieves the encryption key over Xbox Live or retrieves it from the game disc, however it seems that the keys from these methods don't work as CIK keys. It's assumed that these keys are obfuscated/encrypted in some way (possibly with the retail ODK in the same way that the encrypted CIK in non-XVC files is encrypted?) Non-XVC files use an ODK which appears to be static for all XVDs (but differs between retail/devkits ?), this key is used to decrypt the encrypted CIK in the XVD header, the decrypted CIK is then used to decrypt the XVD data. Acronyms CIK: Content Instance Key, used to encrypt the XVD data, is either stored encrypted in the header or stored outside the package in a license file ODK: Offline Distribution Key, used to decrypt the header's encrypted CIK, and likely any CIK stored outside the package Tools xvdtool by emoose References XVD info by emoose on github AES-XTS on wikipedia","title":"Xbox virtual drive"},{"location":"xbox-virtual-drive/#xbox-virtual-drive","text":"","title":"Xbox Virtual Drive"},{"location":"xbox-virtual-drive/#what-are-xvds","text":"XVD packages are a secured file format used by the Xbox One to store data, similar to the Xbox 360's STFS packages. XVD files are usually used to store system images/data while XVCs (a slightly modified version of XVDs) are used to store game data. An XVD file consists of a header containing the hash of the top level hash table, certain metadata about the file (such as content ID, content type, the sandbox ID the package was created for, the product ID that the package belongs to, etc) and also a signature of the header itself which is stored at the beginning of the XVD file, from 0h to 200h. After the header there's space for an optional embedded XVD (which is usually the GameOS partition that the game inside the XVC is coded against). This embedded XVD is just a copy-paste of the XVD being embedded with no changes made to it. After the embedded XVD comes an (optional) area for the hash tree, the tree is a multilevel array of hashes, with the topmost levels containing the hashes of the blocks in the levels underneath it. At the lowest level of the tree hashes of the data blocks (the blocks following the hash tree) are made. The hashes in the hash tree are computed using SHA-256, with the result usually being resized to 18h bytes (but for data block hashes can be slightly modified depending on flags in the XVD header and the XVC region that the data being hashed is located). The full 256-bit hash of the top-most level is stored in the XVD header. Following the hash tree is another optional area reserved for user data (also known as Persistent Local Storage). This area is for games to store local-only data, although some system XVD packages seem to store data here too. Finally after the user data comes the actual XVD data. If the XVD file is an XVC the first 3 blocks are reserved for an XVC descriptor (which is never encrypted). This specifies the content ID, any encryption keys used, the chunks used to update packages (if the XVC is using chunk-based updates) and offsets/lengths/keyIDs of the different XVC regions in the file, along with other metadata. XVC regions can be encrypted with any of the keys specified in the XVC descriptor. The region-based encryption also includes the XVC region ID as part of the AES-XTS IV/counter (known as data unit number for AES-XTS). Then comes the actual filesystem data. This data is encrypted with the CIK (can either be the decrypted value of the encrypted CIK in the XVD header if it's an XVD, or the key corresponding to the XVC key GUID) The filesystem data is just a normal NTFS filesystem containing the files inside the package, other filesystems may be possible but NTFS is the only one observed so far.","title":"What are XVDs?"},{"location":"xbox-virtual-drive/#security-overview","text":"From a security standpoint XVDs seem very secure: Each block of data is hashed, with the hash stored in the bottom-most hash tree level Each block in that hash tree level is then hashed with the hash result stored in the level above it This continues, until eventually the number of hashes in the level can fit into one hash block That hash block is then hashed with the result stored in the XVD header The XVD header is then hashed, and the hash signed with Microsoft's private key, the signature is then stored at the beginning of the file. To make sure the package is authenticated by Microsoft and not tampered with the console just needs to verify the signature of the header-hash, verify the top-most hash tree hash and then verify that each hash in the hash tree matches up with the actual hash. This is similar to the way STFS packages were secured on the Xbox 360, however instead of having the hash tables scattered around the file (as with STFS) they're instead stored before the data actually begins. The data blocks inside XVD files are also secured with AES-XTS encryption (the encrypted data is then used for the hashes), with XVC packages the Xbox One either retrieves the encryption key over Xbox Live or retrieves it from the game disc, however it seems that the keys from these methods don't work as CIK keys. It's assumed that these keys are obfuscated/encrypted in some way (possibly with the retail ODK in the same way that the encrypted CIK in non-XVC files is encrypted?) Non-XVC files use an ODK which appears to be static for all XVDs (but differs between retail/devkits ?), this key is used to decrypt the encrypted CIK in the XVD header, the decrypted CIK is then used to decrypt the XVD data.","title":"Security Overview"},{"location":"xbox-virtual-drive/#acronyms","text":"CIK: Content Instance Key, used to encrypt the XVD data, is either stored encrypted in the header or stored outside the package in a license file ODK: Offline Distribution Key, used to decrypt the header's encrypted CIK, and likely any CIK stored outside the package","title":"Acronyms"},{"location":"xbox-virtual-drive/#tools","text":"xvdtool by emoose","title":"Tools"},{"location":"xbox-virtual-drive/#references","text":"XVD info by emoose on github AES-XTS on wikipedia","title":"References"},{"location":"xcrdutil/","text":"XCRDutil Manage XVD/XVC mounting in Host from SystemOS. Xcrdutil can be used to get info about XVD files as well as mount and create XVD files with some limitations. Via the UWP sandbox, two different XVD files can be mounted, \"Updater.xvd\" and \"SystemTools.xvd\". The tool is located at C:\\Windows\\System32\\xcrdutil.exe Accepted paths XCRDutil allows specifying remote paths (in HostOS) via two notations: - XCRD paths (see below, e.g. [XUC:]\\package.xvd for User Content partition in HostOS) - Global paths (e.g. \\??\\F:\\ for F: / XBFS drive in HostOS) XCRD paths XCRD Id XCRD Path Description 0 [XTE:] HDD Temp 1 [XUC:] HDD User Content 2 [XSS:] HDD System Support 3 [XSU:] HDD System Image 4 N/A N/A 5 [XFG:] HDD Future Growth 6 N/A N/A 7 [XTF:] XTF Remote storage 8 [XBL:] Xbox Live storage 9 [XOD:] XODD (System VM) 10 [XVE:] N/A 11 [XT0:] USB Transfer Storage 12 [XT1:] USB Transfer Storage 13 [XT2:] USB Transfer Storage 14 [XT3:] USB Transfer Storage 15 [XT4:] USB Transfer Storage 16 [XT5:] USB Transfer Storage 17 [XT6:] USB Transfer Storage 18 [XT7:] USB Transfer Storage 19 [XE0:] USB External Storage 20 [XE1:] USB External Storage 21 [XE2:] USB External Storage 22 [XE3:] USB External Storage 23 [XE4:] USB External Storage 24 [XE5:] USB External Storage 25 [XE6:] USB External Storage 26 [XE7:] USB External Storage 27 [XBX:] XBOX (Copy-Over-LAN) 28 [XSR:] SRA (local or SMB) 29 N/A N/A 30 [XAS:] N/A 31 [XRT:] N/A 32 [XRU:] N/A 33 [XRS:] N/A 34 [XRI:] N/A Examples Mount package xcrdutil -m [XUC:]\\targetPackage.xvd Outputs something like: Successfully mounted [XUC:]\\targetPackage.xvd Device Path : \\\\?\\GLOBALROOT\\Device\\Harddisk21\\Partition1 Command completed successfully. Mounted XVD's can be accessed with junctions: mklink /j D:\\Folder \\\\?\\GLOBALROOT\\Device\\Harddisk17\\Partition1\\ Query Info for given XVD: xcrdutil -QueryInfo \\??\\F:\\host.xvd 5 Write file to Host layer xcrdutil -write_blob [XUC:]\\targetPackage.xvd D:\\DevelopmentFiles\\localPackage.xvd Read file from Host layer xcrdutil -read_blob [XUC:]\\targetPackage.xvd D:\\DevelopmentFiles\\localPackage.xvd Delete file on Host layer xcrdutil -delete_blob [XUC:]\\targetPackage.xvd","title":"XCRDutil"},{"location":"xcrdutil/#xcrdutil","text":"Manage XVD/XVC mounting in Host from SystemOS. Xcrdutil can be used to get info about XVD files as well as mount and create XVD files with some limitations. Via the UWP sandbox, two different XVD files can be mounted, \"Updater.xvd\" and \"SystemTools.xvd\". The tool is located at C:\\Windows\\System32\\xcrdutil.exe","title":"XCRDutil"},{"location":"xcrdutil/#accepted-paths","text":"XCRDutil allows specifying remote paths (in HostOS) via two notations: - XCRD paths (see below, e.g. [XUC:]\\package.xvd for User Content partition in HostOS) - Global paths (e.g. \\??\\F:\\ for F: / XBFS drive in HostOS)","title":"Accepted paths"},{"location":"xcrdutil/#xcrd-paths","text":"XCRD Id XCRD Path Description 0 [XTE:] HDD Temp 1 [XUC:] HDD User Content 2 [XSS:] HDD System Support 3 [XSU:] HDD System Image 4 N/A N/A 5 [XFG:] HDD Future Growth 6 N/A N/A 7 [XTF:] XTF Remote storage 8 [XBL:] Xbox Live storage 9 [XOD:] XODD (System VM) 10 [XVE:] N/A 11 [XT0:] USB Transfer Storage 12 [XT1:] USB Transfer Storage 13 [XT2:] USB Transfer Storage 14 [XT3:] USB Transfer Storage 15 [XT4:] USB Transfer Storage 16 [XT5:] USB Transfer Storage 17 [XT6:] USB Transfer Storage 18 [XT7:] USB Transfer Storage 19 [XE0:] USB External Storage 20 [XE1:] USB External Storage 21 [XE2:] USB External Storage 22 [XE3:] USB External Storage 23 [XE4:] USB External Storage 24 [XE5:] USB External Storage 25 [XE6:] USB External Storage 26 [XE7:] USB External Storage 27 [XBX:] XBOX (Copy-Over-LAN) 28 [XSR:] SRA (local or SMB) 29 N/A N/A 30 [XAS:] N/A 31 [XRT:] N/A 32 [XRU:] N/A 33 [XRS:] N/A 34 [XRI:] N/A","title":"XCRD paths"},{"location":"xcrdutil/#examples","text":"Mount package xcrdutil -m [XUC:]\\targetPackage.xvd Outputs something like: Successfully mounted [XUC:]\\targetPackage.xvd Device Path : \\\\?\\GLOBALROOT\\Device\\Harddisk21\\Partition1 Command completed successfully. Mounted XVD's can be accessed with junctions: mklink /j D:\\Folder \\\\?\\GLOBALROOT\\Device\\Harddisk17\\Partition1\\ Query Info for given XVD: xcrdutil -QueryInfo \\??\\F:\\host.xvd 5 Write file to Host layer xcrdutil -write_blob [XUC:]\\targetPackage.xvd D:\\DevelopmentFiles\\localPackage.xvd Read file from Host layer xcrdutil -read_blob [XUC:]\\targetPackage.xvd D:\\DevelopmentFiles\\localPackage.xvd Delete file on Host layer xcrdutil -delete_blob [XUC:]\\targetPackage.xvd","title":"Examples"},{"location":"xct/","text":"XCT Unknown usecase, related to XVD files . File format Offset Length Type Information 0x00 0x10 byte[] ContentId 0x10 0x04 byte[] Unknown 0x14 0x02 ushort Unknown 0x16 0x02 ushort Unknown 0x18 0x04 uint32 Unknown 0x1C 0x04 uint32 Unknown 0x20 0x04 uint32 Unknown 0x24 0x04 uint32 Unknown 0x28 0x04 byte[] Unknown 0x2C 0x02 ushort Unknown 0x2E 0x02 ushort Unknown 0x30 0x08 uint64 Unknown 0x38 0x40 byte[] Unknown 0x78 0x08 uint64 Unknown","title":"XCT"},{"location":"xct/#xct","text":"Unknown usecase, related to XVD files .","title":"XCT"},{"location":"xct/#file-format","text":"Offset Length Type Information 0x00 0x10 byte[] ContentId 0x10 0x04 byte[] Unknown 0x14 0x02 ushort Unknown 0x16 0x02 ushort Unknown 0x18 0x04 uint32 Unknown 0x1C 0x04 uint32 Unknown 0x20 0x04 uint32 Unknown 0x24 0x04 uint32 Unknown 0x28 0x04 byte[] Unknown 0x2C 0x02 ushort Unknown 0x2E 0x02 ushort Unknown 0x30 0x08 uint64 Unknown 0x38 0x40 byte[] Unknown 0x78 0x08 uint64 Unknown","title":"File format"},{"location":"xvi/","text":"Xvi files Some sort of metadata file related to XVD files , stored next to downloaded xvd files on the hard drive. File format Total size: 0x1000 Offset Length Type Information 0x00 0x08 uint64 Magic (crdi-xvc) 0x08 0x238 byte[] Unknown 0x240 0x10 byte[] ContentId 0x250 0x10 byte[] Other Id 0x260 0xDA0 byte[] Unknown","title":"Xvi files"},{"location":"xvi/#xvi-files","text":"Some sort of metadata file related to XVD files , stored next to downloaded xvd files on the hard drive.","title":"Xvi files"},{"location":"xvi/#file-format","text":"Total size: 0x1000 Offset Length Type Information 0x00 0x08 uint64 Magic (crdi-xvc) 0x08 0x238 byte[] Unknown 0x240 0x10 byte[] ContentId 0x250 0x10 byte[] Other Id 0x260 0xDA0 byte[] Unknown","title":"File format"}]}